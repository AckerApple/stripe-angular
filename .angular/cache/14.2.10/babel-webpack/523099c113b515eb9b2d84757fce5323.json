{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ackExpose } from \"./ack\";\nimport { method as errorMethod } from \"./error\";\nimport { method as numberMethod } from \"./number\";\nimport { method as stringMethod } from \"./string\";\nimport { method as binaryMethod } from \"./binary\";\nimport { method as base64Method } from \"./base64\";\nimport { method as objectMethod } from \"./object\";\nimport { method as arrayMethod } from \"./array\";\nimport { method as queryObjectMethod } from \"./queryObject\";\nimport { method as weekMethod } from \"./week\";\nimport { method as monthMethod } from \"./month\";\nimport { method as yearMethod } from \"./year\";\nimport { method as dateMethod } from \"./date\";\nimport { method as timeMethod } from \"./time\";\nimport { method as methodMethod } from \"./method\";\n\nvar ack = function (_super) {\n  __extends(ack, _super);\n\n  function ack($var) {\n    var _this = _super.call(this, $var) || this;\n\n    _this.error = errorMethod;\n    _this.number = numberMethod;\n    _this.string = stringMethod;\n    _this.binary = binaryMethod;\n    _this.base64 = base64Method;\n    _this.object = objectMethod;\n    _this.array = arrayMethod;\n    _this.queryObject = queryObjectMethod;\n    _this.week = weekMethod;\n    _this.month = monthMethod;\n    _this.year = yearMethod;\n    _this.date = dateMethod;\n    _this.time = timeMethod;\n    _this.method = methodMethod;\n    if (!_this) return new ack($var);\n    return _this;\n  }\n\n  ack.prototype.ackit = function (name) {\n    return ack[name];\n  };\n\n  ack.error = errorMethod;\n  ack.number = numberMethod;\n  ack.string = stringMethod;\n  ack.binary = binaryMethod;\n  ack.base64 = base64Method;\n  ack.object = objectMethod;\n  ack.array = arrayMethod;\n  ack.queryObject = queryObjectMethod;\n  ack.week = weekMethod;\n  ack.month = monthMethod;\n  ack.year = yearMethod;\n  ack.date = dateMethod;\n  ack.time = timeMethod;\n  ack.method = methodMethod;\n  return ack;\n}(ackExpose);\n\nexport { ack };\nexport default ack;","map":null,"metadata":{},"sourceType":"module"}