{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Month } from \"./month\";\nimport { method as AckDate } from \"./date\";\n\nvar Week = function (_super) {\n  __extends(Week, _super);\n\n  function Week() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Week.prototype.getEndDate = function () {\n    if (this.endDate) return this.endDate;\n    this.endDate = new Date(this.getStartDate().getDate() + 6);\n    return this.endDate;\n  };\n\n  Week.prototype.setEndDate = function (date) {\n    if (!AckDate(date).isDate() && !isNaN(date)) this.endDate = AckDate(new Date()).setMonth(date).getLastDateOfMonth();else this.endDate = date;\n    return this;\n  };\n\n  Week.prototype.setStartDate = function (date) {\n    if (!isNaN(date) && date.constructor != Date) this.date = AckDate(new Date()).gotoWeek(date).date;else this.date = date;\n    return this;\n  };\n\n  Week.prototype.getStartDate = function () {\n    if (!this.date) this.date = AckDate(new Date()).getDateWeekStart();\n    return this.date;\n  };\n\n  return Week;\n}(Month);\n\nexport { Week };\nexport function method(path) {\n  return new Week(path);\n}","map":null,"metadata":{},"sourceType":"module"}