{"ast":null,"code":"import formurlencoded from 'form-urlencoded';\nimport { stringInterpolations, stringIdentifiers, tryParse } from \"./app.component.utils\";\nexport function requestByRouter(route, options) {\n  delete route.result;\n  delete route.error;\n  const req = route.request || {};\n\n  if (!req) {\n    return console.warn('ðŸŸ  not an api request');\n  }\n\n  ++route.smarts.load;\n  let url = options.baseUrl || req.host || '';\n\n  if (options.id) {\n    const idSearch = /\\$\\{\\s*id\\s*\\}/.exec(req.path);\n\n    if (idSearch && idSearch.length > 0) {\n      url = url + req.path.slice(0, idSearch.index) + options.id + req.path.slice(idSearch.index + idSearch[0].length, url.length);\n    } else {\n      url = url + options.id;\n    }\n  } else {\n    url = url + req.path;\n  }\n\n  const rawData = options.post || options.json || route.data;\n  const data = rawData ? JSON.parse(JSON.stringify(rawData)) : {}; // clone\n\n  const params = req.params;\n  const replaced = replaceStringVars(url, params);\n  url = replaced.url;\n  let headers = {};\n\n  if (options.request?.headers) {\n    Object.assign(headers, options.request.headers);\n  }\n\n  if (req.headers) {\n    Object.assign(headers, req.headers);\n  }\n\n  if (req.removeHeaderValues) {\n    headers = JSON.parse(JSON.stringify(headers)); // clone before deletes occur\n\n    Object.entries(headers).forEach(([key, value]) => {\n      if (req.removeHeaderValues.includes(value)) {\n        delete headers[key];\n      }\n    });\n  }\n\n  const reqOptions = {\n    url,\n    method: req.method,\n    headers,\n    authorizationBearer: options.request?.authorizationBearer\n  };\n\n  if (options.post) {\n    reqOptions.post = data;\n  }\n\n  if (options.json) {\n    reqOptions.json = data;\n  } // GET convert POST to query params\n\n\n  if (req.method === 'GET' && reqOptions.post) {\n    options.query = reqOptions.post;\n  }\n\n  if (options.query) {\n    const queryString = Object.keys(options.query).reduce((all, key) => all + (all.length && '&' || '') + `${key}=${options.query[key]}`, '');\n    reqOptions.url = reqOptions.url + '?' + queryString;\n  }\n\n  return request(reqOptions).then(resultSetter(route)).catch(err => {\n    route.error = err;\n    console.error('ðŸ”´ err', err);\n    return Promise.reject(err);\n  }).finally(() => --route.smarts.load);\n}\nexport function request({\n  url,\n  method,\n  post,\n  json,\n  headers,\n  authorizationBearer\n}) {\n  return new Promise((res, rej) => {\n    const req = new XMLHttpRequest();\n    const endMethod = method || (post || json ? 'POST' : 'GET'); // req.open(endMethod, url, true);\n\n    req.open(endMethod, url);\n    req.setRequestHeader('Accept', 'application/json');\n\n    if (authorizationBearer) {\n      req.setRequestHeader('Authorization', 'Bearer ' + authorizationBearer);\n    }\n\n    if (headers) {\n      Object.entries(headers).forEach(([name, value]) => req.setRequestHeader(name, value));\n    } // const formPost = objectToUriForm(post)\n\n\n    if (post) {\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded charset=UTF-8');\n      const formPost = formurlencoded(post);\n      req.send(formPost);\n    } else if (json) {\n      const content = JSON.stringify(json); // req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n      req.setRequestHeader(\"Content-Type\", \"application/json\"); // req.setRequestHeader(\"Content-Length\", content.length.toString())\n\n      req.send(content);\n    } else {\n      req.send();\n    }\n\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        res(tryParse(req.responseText));\n      }\n    };\n  });\n}\n\nfunction replaceStringVars(url, data) {\n  // ${interpolations}\n  const regexp = stringInterpolations;\n  const array = [...url.matchAll(regexp)];\n\n  for (let index = array.length - 1; index >= 0; --index) {\n    const result = array[index];\n    const key = result[0].slice(2, result[0].length - 1).trim(); // remove brackets and trim\n\n    const value = data[key]; // delete data[key] // remove from body data\n\n    url = url.slice(0, result.index) + value + url.slice(result.index + result[0].length, url.length);\n  } // :identifiers\n\n\n  const idRegexp = stringIdentifiers;\n  const idArray = [...url.matchAll(idRegexp)];\n\n  for (let index = idArray.length - 1; index >= 0; --index) {\n    const result = idArray[index];\n    const rIndex = result.index;\n\n    if (rIndex === undefined) {\n      continue;\n    }\n\n    const key = result[0].slice(2, result[0].length).trim(); // remove :\n\n    const value = data[key];\n    url = url.slice(0, rIndex + 1) + value + url.slice(rIndex + result[0].length, url.length);\n  }\n\n  return {\n    url,\n    data\n  };\n}\n\nfunction resultSetter(route) {\n  return res => {\n    const parsed = tryParse(res);\n    route.smarts.resultAt = Date.now();\n\n    if (parsed.error) {\n      const error = {\n        message: parsed.errorMessage,\n        name: res.error\n      };\n      route.error = error;\n      throw error;\n    }\n\n    delete route.error;\n    route.result = parsed;\n    route.smarts.$result.next(route);\n    return route;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}