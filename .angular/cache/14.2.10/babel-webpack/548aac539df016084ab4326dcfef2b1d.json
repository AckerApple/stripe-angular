{"ast":null,"code":"var ackInjector = function () {\n  function ackInjector($scope, $storage) {\n    this.LoadModule = function (name, $module, $args, injectArray) {\n      if ($module.constructor != Function) {\n        return $module;\n      }\n\n      if (!injectArray) {\n        var r = $module.apply($module, $args);\n        return r;\n      }\n\n      var isInjectInit = typeof injectArray == 'function',\n          init = isInjectInit ? injectArray : injectArray[injectArray.length - 1],\n          args = [];\n\n      if (!isInjectInit) {\n        var tar;\n\n        for (var i = 0; i < injectArray.length - 1; ++i) {\n          switch (injectArray[i].toLowerCase()) {\n            case '$arg0':\n              tar = $args[0];\n              break;\n\n            case '$injector':\n              tar = this.$scope;\n              break;\n\n            case '$module':\n              tar = $module;\n              break;\n\n            case '$args':\n              tar = Array.prototype.slice.call($args);\n              break;\n\n            default:\n              if (this.$scope[injectArray[i]] != null) {\n                tar = this.$scope[injectArray[i]];\n              } else if (this.$storage[injectArray[i]] != null) {\n                tar = this.$storage[injectArray[i]];\n              }\n\n          }\n\n          args.push(tar);\n        }\n      }\n\n      args = args.concat(Array.prototype.slice.call($args));\n\n      if (typeof init == 'string') {\n        switch (init) {\n          case '$module':\n            return $module.apply($module, args);\n\n          default:\n            throw 'should not get here. Last argument of injector was not a function NOR \"$module\"';\n        }\n      }\n\n      return init.apply(init, args);\n    };\n\n    this.$storage = $storage || {};\n    this.$scope = $scope || this;\n    return this;\n  }\n\n  ackInjector.prototype.define = function (name, $module, initInjectArray) {\n    var $this = this;\n\n    var method = function () {\n      return $this.LoadModule(name, $module, arguments, initInjectArray);\n    };\n\n    this.$scope[name] = method;\n    return this;\n  };\n\n  ackInjector.prototype.definePath = function (name, path, initInjectArray) {\n    var $this = this;\n\n    var fetcher = function () {\n      var $module = $this.getModule(name, path);\n      return $this.LoadModule(name, $module, arguments, initInjectArray);\n    };\n\n    this.$scope[name] = fetcher;\n    return this;\n  };\n\n  ackInjector.prototype.getModule = function (name, path) {\n    if (this.$storage[name]) return this.$storage[name];\n    throw new Error('Module not defined (' + name + '). Valid modules: \"' + Object.keys(this.$storage).join(',') + '\"');\n  };\n\n  ackInjector.prototype.newModule = function (name, path, arg) {\n    var Module = this.getModule(name, path);\n    return new Module(arg);\n  };\n\n  return ackInjector;\n}();\n\nexport { ackInjector };","map":null,"metadata":{},"sourceType":"module"}