{"ast":null,"code":"var jXQueryObject = function () {\n  function jXQueryObject(object) {\n    this.queryObject = object;\n    return this;\n  }\n\n  jXQueryObject.prototype.getNameArray = function () {\n    return Object.keys(this.queryObject);\n  };\n\n  jXQueryObject.prototype.toCsv = function (delimOrOptions, textQualifier, titleArray) {\n    return this.Csv.apply(this, arguments).output();\n  };\n\n  jXQueryObject.prototype.Csv = function (delimOrOptions, textQualifier, titleArray) {\n    if (typeof delimOrOptions == 'string') delimOrOptions = {\n      delimiter: delimOrOptions\n    };else if (delimOrOptions == null) delimOrOptions = {};\n    if (textQualifier) delimOrOptions.textQualifier = textQualifier;\n    if (titleArray) delimOrOptions.titleArray = titleArray;\n    return new jXQueryObjectCsv(this.queryObject, delimOrOptions);\n  };\n\n  return jXQueryObject;\n}();\n\nexport { jXQueryObject };\n\nvar jXQueryObjectCsv = function () {\n  function jXQueryObjectCsv(queryObject, $scope) {\n    this.data = $scope || {};\n    this.data.isNameFirstRow = this.data.isNameFirstRow == null ? true : this.data.isNameFirstRow;\n    this.data.delimiter = this.data.delimiter || ',';\n    this.data.queryObject = queryObject || this.data.queryObject || {};\n    return this;\n  }\n\n  jXQueryObjectCsv.prototype.getTitleArray = function () {\n    if (this.data.titleArray) return this.data.titleArray;\n    if (this.data.isNameFirstRow) return Object.keys(this.data.queryObject);\n  };\n\n  jXQueryObjectCsv.prototype.output = function () {\n    return this.toArray().join(this.data.lineDelim || '\\r\\n');\n  };\n\n  jXQueryObjectCsv.prototype.toArray = function () {\n    var columnLoop;\n    var columnCount;\n    var newValue;\n    var newTitle;\n    var returnText = [];\n    var titleArray = this.getTitleArray();\n    var nameArray = titleArray;\n    var tempContent;\n    var options = this.data;\n\n    if (options.textQualifier && options.textQualifier.length) {\n      var nr = new RegExp('/' + options.textQualifier + '/', 'gi');\n\n      var getCsvValueOf = function (val) {\n        if (val == null) return '';\n        val = val.toString().replace(nr, options.textQualifier + options.textQualifier);\n        val = options.textQualifier + val + options.textQualifier;\n        return val;\n      };\n    } else var getCsvValueOf = function (val) {\n      return val;\n    };\n\n    var tempArray = [];\n\n    for (columnLoop = 0; columnLoop < titleArray.length; ++columnLoop) {\n      if (typeof titleArray[columnLoop] == 'object') {\n        newTitle = titleArray[columnLoop][1];\n        titleArray[columnLoop] = newTitle;\n        nameArray[columnLoop] = titleArray[columnLoop][0];\n      } else {\n        newTitle = titleArray[columnLoop];\n      }\n\n      newValue = getCsvValueOf(newTitle);\n      tempArray.push(newValue);\n    }\n\n    if (this.data.isNameFirstRow) {\n      tempContent = tempArray.join(this.data.delimiter);\n\n      if (tempContent) {\n        returnText.push(tempContent);\n      }\n    }\n\n    var rowLoop,\n        columnName,\n        firstColumn = this.data.queryObject[nameArray[0]];\n\n    if (firstColumn) {\n      var len = firstColumn.length;\n\n      for (rowLoop = 0; rowLoop < len; ++rowLoop) {\n        tempArray = [];\n        columnCount = nameArray.length;\n\n        for (columnLoop = 0; columnLoop < columnCount; ++columnLoop) {\n          columnName = nameArray[columnLoop];\n          newValue = this.data.queryObject[columnName][rowLoop];\n          newValue = getCsvValueOf(newValue);\n          tempArray.push(newValue);\n        }\n\n        tempContent = tempArray.join(this.data.delimiter);\n        returnText.push(tempContent);\n      }\n    }\n\n    return returnText;\n  };\n\n  return jXQueryObjectCsv;\n}();\n\nexport { jXQueryObjectCsv };\nexport function method(variable) {\n  return new jXQueryObject(variable);\n}","map":null,"metadata":{},"sourceType":"module"}