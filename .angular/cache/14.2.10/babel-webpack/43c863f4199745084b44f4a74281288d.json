{"ast":null,"code":"export function method(errorObject) {\n  return new jError(errorObject);\n}\n\nvar jError = function () {\n  function jError(errorObject) {\n    this.types = jErrorTypes;\n    this.errorObject = errorObject;\n    return this;\n  }\n\n  jError.prototype.toObject = function () {\n    var _this = this;\n\n    var keys = Object.getOwnPropertyNames(this.errorObject);\n    var ob = {};\n    keys.forEach(function (key) {\n      return ob[key] = _this.errorObject[key];\n    });\n    return ob;\n  };\n\n  jError.prototype.getKeys = function () {\n    return Object.getOwnPropertyNames(this.errorObject);\n  };\n\n  jError.prototype.getStackArray = function () {\n    if (this.stackArray) {\n      return this.stackArray;\n    }\n\n    if (this.errorObject.stack) {\n      if (this.errorObject.stack.split) {\n        this.stackArray = this.errorObject.stack.split(' at ');\n      } else if (this.errorObject.stack.splice) {\n        this.stackArray = this.errorObject.stack;\n      }\n\n      return this.stackArray;\n    }\n\n    return [];\n  };\n\n  jError.prototype.getTraceArray = function (amount) {\n    var stackArray = [];\n    stackArray.push.apply(stackArray, this.getStackArray());\n    stackArray.shift();\n\n    if (amount) {\n      stackArray.splice(amount, stackArray.length);\n    }\n\n    return stackArray;\n  };\n\n  jError.prototype.getFirstTrace = function (amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    var stackArray = this.getStackArray();\n    if (!stackArray) return;\n\n    if (stackArray.length == 1) {\n      var rtn = [stackArray[0]];\n    } else {\n      var rtn = [];\n\n      for (var i = 1; i <= stackArray.length && i <= amount; ++i) {\n        rtn.push(stackArray[i]);\n      }\n    }\n\n    return rtn.join(' at ');\n  };\n\n  jError.prototype.setStackArray = function (stackArray) {\n    this.errorObject.stack = stackArray.join(' at ');\n    this.stackArray = stackArray;\n    return this;\n  };\n\n  jError.prototype.cutFirstTrace = function () {\n    var stackArray = this.getStackArray();\n\n    if (stackArray && stackArray.length > 1) {\n      stackArray.splice(1, 1);\n      this.setStackArray(stackArray);\n    }\n\n    return this;\n  };\n\n  jError.prototype.getLineNum = function () {\n    var string = this.getFirstTrace().split(':')[1];\n    return Number(string);\n  };\n\n  jError.prototype.getFilePath = function () {\n    var trace = this.getFirstTrace();\n    var pathArray = trace.split(':');\n    pathArray.pop();\n    pathArray.pop();\n    return pathArray.join(':').split('(').pop();\n  };\n\n  jError.prototype.getName = function () {\n    if (this.errorObject.name) return this.errorObject.name;\n    return this.getFailingObjectName();\n  };\n\n  jError.prototype.getFailingObjectName = function () {\n    var trace = this.getFirstTrace();\n    return trace.split(/\\(|@/)[0].trim();\n  };\n\n  jError.prototype.getMessage = function () {\n    if (this.errorObject.message) return this.errorObject.message;\n    var fTrace = this.getFirstTrace();\n\n    if (fTrace) {\n      var fSpaceArray = fTrace.split(' ');\n\n      if (fSpaceArray.length) {\n        return fSpaceArray.splice(0, 1)[0];\n      }\n    }\n\n    if (this.errorObject.constructor == String) {\n      return this.errorObject;\n    }\n  };\n\n  jError.prototype.getType = function () {\n    var isNamed = this.errorObject.name && this.errorObject.name.toLowerCase != null;\n    var isCode = this.errorObject.code && this.errorObject.code.toLowerCase != null;\n\n    if (isCode && this.errorObject.name == 'Error') {\n      return this.errorObject.code;\n    }\n\n    if (isNamed) {\n      return this.errorObject.name;\n    }\n  };\n\n  jError.prototype.isType = function (type) {\n    if (this.errorObject == null) return false;\n\n    if (this.errorObject.constructor && type == this.errorObject.constructor) {\n      return true;\n    }\n\n    var eName = this.getType();\n\n    if (eName && eName.toLowerCase() == type.toLowerCase()) {\n      return true;\n    }\n\n    if (type.constructor == String) {\n      if (this.errorObject.constructor == String) {\n        return this.errorObject.toLowerCase() === type.toLowerCase();\n      }\n\n      var mess = this.getMessage();\n\n      if (mess && type.toLowerCase() == mess.toLowerCase()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return jError;\n}();\n\nexport { jError };\nexport var jErrorTypes = {};\n\njErrorTypes.NotFound = function (message) {\n  Error[\"captureStackTrace\"](this, this.constructor);\n  this.name = this.constructor.name;\n  this.status = 404;\n  this.code = \"not_found\";\n  this.message = message || \"Could Not Find Requested Resource\";\n};\n\njErrorTypes.NotFound.prototype = Object.create(Error.prototype);\n\njErrorTypes.notFound = function (message) {\n  return new jErrorTypes.NotFound(message);\n};\n\njErrorTypes.LocalNetworkRequired = function (message) {\n  Error[\"captureStackTrace\"](this, this.constructor);\n  this.name = this.constructor.name;\n  this.status = 403;\n  this.code = \"local_network_required\";\n  this.message = message || \"Local Network Connection Required\";\n};\n\njErrorTypes.LocalNetworkRequired.prototype = Object.create(Error.prototype);\n\njErrorTypes.localNetworkRequired = function (message) {\n  return new jErrorTypes.LocalNetworkRequired(message);\n};\n\njErrorTypes.Unauthorized = function (message) {\n  Error[\"captureStackTrace\"](this, this.constructor);\n  this.name = this.constructor.name;\n  this.status = 401;\n  this.code = \"credentials_required\";\n  this.message = message || \"No authorization token was found\";\n};\n\njErrorTypes.Unauthorized.prototype = Object.create(Error.prototype);\n\njErrorTypes.unauthorized = function (message) {\n  return new jErrorTypes.Unauthorized(message);\n};\n\njErrorTypes.BadRequest = function (message) {\n  Error[\"captureStackTrace\"](this, this.constructor);\n  this.name = this.constructor.name;\n  this.status = 400;\n  this.code = \"bad_request\";\n  this.message = message || \"Bad Request\";\n};\n\njErrorTypes.BadRequest.prototype = Object.create(Error.prototype);\n\njErrorTypes.badRequest = function (message) {\n  return new jErrorTypes.BadRequest(message);\n};\n\nfunction MethodNotAllowed(message) {\n  Error[\"captureStackTrace\"](this, this.constructor);\n  this.name = this.constructor.name;\n  this.status = 405;\n  this.code = \"method_not_allowed\";\n  this.message = message || \"Method Not Allowed\";\n}\n\njErrorTypes.MethodNotAllowed = MethodNotAllowed;\njErrorTypes.MethodNotAllowed.prototype = Object.create(Error.prototype);\n\njErrorTypes.methodNotAllowed = function (message) {\n  return new MethodNotAllowed(message);\n};","map":null,"metadata":{},"sourceType":"module"}