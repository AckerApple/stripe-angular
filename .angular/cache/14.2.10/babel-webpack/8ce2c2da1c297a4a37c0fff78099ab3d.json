{"ast":null,"code":"import * as momentPackage from \"moment-mini\";\nimport { suffixByNumber } from \"./number\";\nvar moment = momentPackage[\"default\"] ? momentPackage[\"default\"] : momentPackage;\n\nvar AckDate = function () {\n  function AckDate(date, format) {\n    this.dateHoursDiff = this.dateHourDiff;\n    this.isDst = this.isDaylightSavings;\n\n    this.lesser = function (otherDate) {\n      return new AckDate(otherDate).date < this.date ? true : false;\n    };\n\n    this.getDate = function () {\n      return this.date.getDate();\n    };\n\n    this.setDate = function (n) {\n      var d = this.date;\n      d = d.setDate(n);\n      this.date = new Date(d);\n      return this;\n    };\n\n    this.setDayOfMonth = this.setDate;\n    this.getYear = this.year;\n    this.addYear = this.nextYear;\n    this.addYears = this.nextYear;\n    this.getMonth = this.month;\n    this.addMonths = this.nextMonth;\n    this.nextDay = this.addDays;\n    this.priorDay = this.prevDay;\n    this.getWeek = this.week;\n    this.gotoFirstDayOfWeek = this.gotoSunday;\n    this.gotoLastDayOfWeek = this.gotoSaturday;\n    this.gotoMondayOfWeek = this.gotoMonday;\n    this.gotoFridayOfWeek = this.gotoFriday;\n    this.gotoEndOfDate = this.gotoEod;\n    this.gotoStartOfDate = this.gotoSod;\n    this.dateSecondsDiff = this.dateSecondDiff;\n    this.dateMinutesDiff = this.dateMinuteDiff;\n    this.date = toDate(date, format);\n    return this;\n  }\n\n  AckDate.prototype.getTime = function () {\n    return this.date.getTime();\n  };\n\n  AckDate.prototype.getHours = function () {\n    return this.date.getHours();\n  };\n\n  AckDate.prototype.getMinutes = function () {\n    return this.date.getMinutes();\n  };\n\n  AckDate.prototype.getMilliseconds = function () {\n    return this.date.getMilliseconds();\n  };\n\n  AckDate.prototype.getUtcDate = function () {\n    return new Date(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate(), this.date.getUTCHours(), this.date.getUTCMinutes(), this.date.getUTCSeconds());\n  };\n\n  AckDate.prototype.utc = function () {\n    return this.date.getTime();\n  };\n\n  AckDate.prototype.toUtc = function () {\n    this.date = this.getUtcDate();\n    return this;\n  };\n\n  AckDate.prototype.setDateByString = function (date) {\n    this.date = dateStringToDate(date);\n    return this;\n  };\n\n  AckDate.prototype.getTimezoneStamp = function (sep) {\n    return getTimezoneStamp(this.date, sep);\n  };\n\n  AckDate.prototype.yearsFromNow = function () {\n    return this.dateYearDiff(Date.now());\n  };\n\n  AckDate.prototype.monthsFromNow = function () {\n    return this.dateMonthDiff(Date.now());\n  };\n\n  AckDate.prototype.daysFromNow = function () {\n    return this.dateDayDiff(Date.now());\n  };\n\n  AckDate.prototype.fromNow = function (hideSuffix) {\n    return moment(this.date).fromNow(hideSuffix);\n  };\n\n  AckDate.prototype.fromToday = function (hideSuffix) {\n    var fDate = new AckDate().now().gotoSod().date;\n    var mDate = new AckDate(this.date).gotoSod().date;\n    return moment(mDate).from(fDate, hideSuffix);\n  };\n\n  AckDate.prototype.from = function (d, hideSuffix, options) {\n    var m = moment(toDate(d));\n    var m2 = moment(this.date);\n    var mDateDiff = momentDateDiff(m, m2, options);\n    return moment(0).from(mDateDiff, hideSuffix);\n  };\n\n  AckDate.prototype.diffStats = function (d) {\n    d = toDate(d);\n    var myTime = this.date.getTime();\n    var yearsDiff = dateYearDiffFloor(this.date, d);\n    var months = dateMonthDiffFloor(this.date, d);\n    var monthsDiff = months % 12;\n    var hoursDiff = this.dateHourDiff(d) % 24;\n    var days = new AckDate(myTime).addMonths(months).dateDayDiff(d);\n    var dayDiff = days % 7;\n    var weeks = Math.floor(days / 7);\n    var weekDiff = weeks === 4 && monthsDiff === 0 ? 4 : weeks % 4;\n    return {\n      years: yearsDiff,\n      months: monthsDiff,\n      weeks: weekDiff,\n      days: dayDiff,\n      hours: hoursDiff,\n      minutes: this.dateMinuteDiff(d) % 60,\n      seconds: this.dateSecondDiff(d) % 60\n    };\n  };\n\n  AckDate.prototype.now = function () {\n    this.date = new Date();\n    return this;\n  };\n\n  AckDate.prototype.param = function () {\n    this.date = this.date || new Date();\n    return this;\n  };\n\n  AckDate.prototype.hourMinuteDecimalDiff = function (date) {\n    var h = this.dateHourDiff(date);\n    var m = this.dateMinuteDiff(date) % 60 / 60;\n    return toDecimal(h + m);\n  };\n\n  AckDate.prototype.hourMinSecDiff = function (date, sep) {\n    if (sep === void 0) {\n      sep = \":\";\n    }\n\n    return this.dateHourDiff(date) + sep + ('0' + this.dateMinuteDiff(date) % 60).slice(-2) + sep + ('0' + this.dateSecondDiff(date) % 60).slice(-2);\n  };\n\n  AckDate.prototype.minSecDiff = function (date, sep) {\n    if (sep === void 0) {\n      sep = \":\";\n    }\n\n    return ('0' + this.dateMinuteDiff(date)).slice(-2) + sep + ('0' + this.dateSecondDiff(date) % 60).slice(-2);\n  };\n\n  AckDate.prototype.dateYearDiff = function (date) {\n    date = toDate(date);\n    return dateYearDiff(date, this.date);\n  };\n\n  AckDate.prototype.dateMonthDiff = function (date) {\n    date = toDate(date);\n    return dateMonthDiff(this.date, date);\n  };\n\n  AckDate.prototype.dateWeekDiff = function (date) {\n    return dateWeekDiff(this.date, date);\n  };\n\n  AckDate.prototype.dateDayDiff = function (date) {\n    return dateDayDiff(this.date, date);\n  };\n\n  AckDate.prototype.dateHourDiff = function (date) {\n    var diffTime = dateObjectBy(date == null ? new Date() : date).getTime();\n    var calcDate = this.date.getTime() - diffTime;\n    return Math.floor(Math.abs(calcDate) / 36e5);\n  };\n\n  AckDate.prototype.isDaylightSavings = function () {\n    if (!this.date) return;\n    return this.date.getTimezoneOffset() < stdTimezoneOffset(this.date);\n  };\n\n  AckDate.prototype.daylightSavings = function () {\n    var d = new Date();\n    return (stdTimezoneOffset(d) - d.getTimezoneOffset()) / 60;\n  };\n\n  AckDate.prototype.greater = function (otherDate) {\n    return new AckDate(otherDate).date > this.date ? true : false;\n  };\n\n  AckDate.prototype.getAgeDisplay = function () {\n    var d = this.date;\n    var toDate = new Date();\n    var local = {};\n    local.isValBirthdate = d != null && isDate(d);\n    if (!local.isValBirthdate) return 0;\n    local.isBorn = this.greater(toDate);\n\n    if (local.isBorn) {\n      local.lesserDate = d;\n      local.greaterDate = toDate;\n    } else {\n      local.lesserDate = toDate;\n      local.greaterDate = d;\n    }\n\n    local.cYear = yearByDate(local.greaterDate);\n    local.lastBirthdate = dateAddDay(local.lesserDate, -365);\n    local.years = dateYearDiff(local.lesserDate, local.greaterDate);\n    local.months = dateMonthDiff(local.lastBirthdate, local.greaterDate);\n    if (local.months >= 12) local.months = local.months % 12;\n    local.format = 1;\n    if (local.months >= 10) local.format = 2;\n    var rtnNum = Number(local.years + '.' + local.months);\n\n    local.result = function (n, p) {\n      var m = Math.pow(10, p);\n      return (Math.round(n * m) / m).toFixed(p);\n    }(rtnNum, local.format);\n\n    if (!local.isBorn) local.result = -local.result;\n    return local.result;\n  };\n\n  AckDate.prototype.gt = function (date) {\n    date = dateObjectBy(date);\n    return this.date > date;\n  };\n\n  AckDate.prototype.lt = function (date) {\n    date = dateObjectBy(date);\n    return this.date < date;\n  };\n\n  AckDate.prototype.clone = function () {\n    return new AckDate(new Date(this.date.getTime()));\n  };\n\n  AckDate.prototype.isDate = function (date) {\n    return isDate(date || this.date);\n  };\n\n  AckDate.prototype.Year = function () {\n    return this.year();\n  };\n\n  AckDate.prototype.year = function () {\n    return yearByDate(this.date);\n  };\n\n  AckDate.prototype.setYear = function (n) {\n    this.date.setFullYear(n);\n    return this;\n  };\n\n  AckDate.prototype.dayOfYear = function () {\n    var d = new AckDate(this.date).gotoEod().date;\n    var compareDate = new Date(d.getFullYear(), 0, 1).getTime();\n    return Math.ceil((d.getTime() - compareDate) / 86400000);\n  };\n\n  AckDate.prototype.getNextYear = function (y) {\n    y = y == null ? 1 : Number(y);\n    return this.year() + y;\n  };\n\n  AckDate.prototype.nextYear = function (y) {\n    if (y === void 0) {\n      y = 1;\n    }\n\n    this.setYear(this.getNextYear(y));\n    return this;\n  };\n\n  AckDate.prototype.getPriorYear = function (y) {\n    y = y == null ? 1 : Number(y);\n    return this.year() - Math.abs(y);\n  };\n\n  AckDate.prototype.priorYear = function (y) {\n    this.setYear(this.getPriorYear(y));\n    return this;\n  };\n\n  AckDate.prototype.getMonthAbbr = function () {\n    return monthAbbrArray[this.date.getMonth()];\n  };\n\n  AckDate.prototype.getMonthDateProperNumber = function () {\n    return this.date.getDate() + this.getMonthDateNumberSuffix();\n  };\n\n  AckDate.prototype.getMonthDateNumberSuffix = function () {\n    return suffixByNumber(this.date.getDate());\n  };\n\n  AckDate.prototype.fullWeeksLeftInMonth = function () {\n    var eDate = this.getLastDateOfMonth();\n    var diff = this.dateDayDiff(eDate);\n    return Math.floor(diff / 7);\n  };\n\n  AckDate.prototype.weekInMonth = function () {\n    var firstDay = new Date(this.date.getFullYear(), this.date.getMonth(), 1).getDay();\n    return Math.ceil((this.date.getDate() + firstDay) / 7);\n  };\n\n  AckDate.prototype.getMonthDayCount = function () {\n    return new Date(this.year(), this.month(), 0).getDate();\n  };\n\n  AckDate.prototype.getMonthName = function () {\n    return monthNameArray[this.month() - 1];\n  };\n\n  AckDate.prototype.getMonthNameArray = function () {\n    return monthNameArray;\n  };\n\n  AckDate.prototype.month = function () {\n    return this.date.getMonth() + 1;\n  };\n\n  AckDate.prototype.priorMonth = function (amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    return this.nextMonth(-Math.abs(amount));\n  };\n\n  AckDate.prototype.nextMonth = function (amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    this.date = new Date(this.date.setMonth(this.date.getMonth() + amount));\n    return this;\n  };\n\n  AckDate.prototype.getLastDateOfMonth = function () {\n    var nd = new Date(this.date.getTime());\n    var EDate = new AckDate(nd);\n    return EDate.nextMonth().gotoFirstDayOfMonth().prevDay().date;\n  };\n\n  AckDate.prototype.setMonth = function (n) {\n    var d = this.date.setMonth(n - 1);\n    this.date = new Date(d);\n    return this;\n  };\n\n  AckDate.prototype.gotoFirstDayOfMonth = function () {\n    this.prevDay(this.date.getDate() - 1);\n    return this;\n  };\n\n  AckDate.prototype.gotoLastDayOfMonth = function () {\n    return this.nextMonth().gotoFirstDayOfMonth().priorDay();\n  };\n\n  AckDate.prototype.daysInMonth = function () {\n    return new Date(this.year(), this.month(), 0).getDate();\n  };\n\n  AckDate.prototype.addDays = function (amount) {\n    var nd = dateAddDay(this.date, amount);\n    this.date = new Date(nd.getTime());\n    return this;\n  };\n\n  AckDate.prototype.prevDay = function (amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    var d = new Date(this.date.getTime());\n    this.date = new Date(d.setDate(d.getDate() - amount));\n    return this;\n  };\n\n  AckDate.prototype.isWeekend = function () {\n    return [1, 7].indexOf(this.dayOfWeek()) >= 0;\n  };\n\n  AckDate.prototype.week = function () {\n    return weekOfDate(this.date);\n  };\n\n  AckDate.prototype.dayOfWeek = function () {\n    var d = this.date;\n    return d.getDay() + 1;\n  };\n\n  AckDate.prototype.gotoSunday = function () {\n    this.prevDay(this.dayOfWeek() - 1);\n    return this;\n  };\n\n  AckDate.prototype.gotoSaturday = function () {\n    return this.nextWeek().gotoFirstDayOfWeek().prevDay();\n  };\n\n  AckDate.prototype.gotoMonday = function () {\n    this.gotoFirstDayOfWeek().nextDay();\n    return this;\n  };\n\n  AckDate.prototype.gotoFriday = function () {\n    this.gotoFirstDayOfWeek().nextDay(5);\n    return this;\n  };\n\n  AckDate.prototype.gotoWeek = function (week) {\n    var thisWk = this.week();\n    this.nextWeek(week - thisWk);\n    return this;\n  };\n\n  AckDate.prototype.priorWeek = function (amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    return this.nextWeek(-Math.abs(amount));\n  };\n\n  AckDate.prototype.nextWeek = function (amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    this.nextDay(amount * 7);\n    return this;\n  };\n\n  AckDate.prototype.getDateWeekStart = function () {\n    var date = this.date;\n    var dw = this.dayOfWeek() - 1;\n    return new Date(date.setDate(date.getDate() - dw));\n  };\n\n  AckDate.prototype.getDateWeekStop = function () {\n    var date = this.getDateWeekStart();\n    date = date.setDate(date.getDate() + 6);\n    return endOfDateDay(date);\n  };\n\n  AckDate.prototype.gotoEod = function () {\n    this.date = endOfDateDay(this.date);\n    return this;\n  };\n\n  AckDate.prototype.gotoSod = function () {\n    this.date = startOfDateDay(this.date);\n    return this;\n  };\n\n  AckDate.prototype.gotoStartOfWeek = function () {\n    this.date = this.getDateWeekStart();\n    return this.gotoSod();\n  };\n\n  AckDate.prototype.gotoEndOfWeek = function () {\n    this.date = this.getDateWeekStop();\n    return this.gotoEod();\n  };\n\n  AckDate.prototype.FirstWeekday = function () {\n    var amount = -this.dayOfWeek() + 2,\n        nd = this.date,\n        nd = new Date(nd.getTime()),\n        Nd = new AckDate(nd).nextDay(amount);\n    return Nd;\n  };\n\n  AckDate.prototype.getDateOfFirstWeekday = function () {\n    return new Date(this.FirstWeekday().date.getTime());\n  };\n\n  AckDate.prototype.eachWeekInYear = function (method) {\n    var num = this.getWeeksInYear(),\n        year = this.year();\n\n    for (var x = 1; x <= num; ++x) {\n      var ExD = new AckDate(this.date).setYear(year).gotoWeek(x);\n      ExD.gotoFirstDayOfWeek();\n      method(x, ExD);\n    }\n\n    return this;\n  };\n\n  AckDate.prototype.eachWeekWithMondayInYear = function (method) {\n    this.eachWeekInYear(function (num, AckDate) {\n      method(num, AckDate.gotoMondayOfWeek());\n    });\n    return this;\n  };\n\n  AckDate.prototype.getWeeksWithMondayInYearExposedArray = function () {\n    var rtnArray = [];\n    this.eachWeekWithMondayInYear(function (weekNum, AckDate) {\n      rtnArray.push(AckDate);\n    });\n    return rtnArray;\n  };\n\n  AckDate.prototype.getWeeksWithMondayInYearArray = function () {\n    var rtnArray = [];\n    this.eachWeekWithMondayInYear(function (weekNum, AckDate) {\n      rtnArray.push(AckDate.date);\n    });\n    return rtnArray;\n  };\n\n  AckDate.prototype.getWeeksInYear = function (y) {\n    y = y ? y : this.year();\n    var d, isLeap;\n    d = new Date(y, 0, 1);\n    isLeap = new Date(y, 1, 29).getMonth() === 1;\n    return d.getDay() === 4 || isLeap && d.getDay() === 3 ? 53 : 52;\n  };\n\n  AckDate.prototype.setTimeByString = function (string) {\n    if (!this.date || !string) return this;\n\n    if (string.split) {\n      var parsed = parseTimeString(string);\n      var change = this.date.setHours(parsed.hour);\n      change = new Date(change).setMinutes(parsed.minute);\n      this.date = new Date(change);\n    }\n\n    return this;\n  };\n\n  AckDate.prototype.addHours = function (n) {\n    if (this.date) {\n      this.date.setHours(this.date.getHours() + n);\n    }\n\n    return this;\n  };\n\n  AckDate.prototype.addMinutes = function (n) {\n    if (this.date) this.date = new Date(this.date.getTime() + n * 60000);\n    return this;\n  };\n\n  AckDate.prototype.minuteOfDay = function () {\n    return 60 * this.date.getHours() + this.date.getMinutes();\n  };\n\n  AckDate.prototype.addSeconds = function (n) {\n    return this.addMilliseconds(n * 1000);\n  };\n\n  AckDate.prototype.addMilliseconds = function (n) {\n    if (this.date) this.date = new Date(this.date.getTime() + n);\n    return this;\n  };\n\n  AckDate.prototype.dateSecondDiff = function (date, decimals) {\n    return datesSecondDiff(this.date, date, decimals);\n  };\n\n  AckDate.prototype.dateMinuteDiff = function (date, roundUp) {\n    if (roundUp === void 0) {\n      roundUp = false;\n    }\n\n    return datesMinuteDiff(this.date, date, roundUp);\n  };\n\n  AckDate.prototype.format = function (format) {\n    return moment(this.date).format(format);\n  };\n\n  AckDate.prototype.getDayName = function () {\n    if (!this.date) return '';\n    return dayNameArray[this.date.getDay()];\n  };\n\n  AckDate.prototype.getDayAbbr = function () {\n    if (!this.date) return '';\n    return dayAbbrArray[this.date.getDay()];\n  };\n\n  AckDate.prototype.mmmmdyyyy = function () {\n    if (!this.date) return '';\n    return this.getMonthName() + ' ' + this.getMonthDateProperNumber() + ' ' + this.date.getFullYear();\n  };\n\n  AckDate.prototype.hhmmssl = function (timeSep, milsecSep) {\n    if (timeSep === void 0) {\n      timeSep = ':';\n    }\n\n    if (milsecSep === void 0) {\n      milsecSep = '.';\n    }\n\n    if (!this.date) return '';\n    var d = this.date;\n    var h = d.getHours();\n    var m = d.getMinutes();\n    m = m < 10 ? '0' + m : m;\n    h = ('0' + h).slice(-2);\n    var s = ('0' + d.getSeconds()).slice(-2);\n    return h + timeSep + m + timeSep + s + milsecSep + d.getMilliseconds();\n  };\n\n  AckDate.prototype.hhmmsl = function (timeSep, milsecSep) {\n    if (!this.date) return '';\n    var d = this.date;\n    var timeSep = timeSep || ':';\n    var milsecSep = milsecSep || '.';\n    var h = d.getHours();\n    var m = d.getMinutes();\n    m = m < 10 ? '0' + m : m;\n    h = ('0' + h).slice(-2);\n    return h + timeSep + m + timeSep + d.getSeconds() + milsecSep + d.getMilliseconds();\n  };\n\n  AckDate.prototype.hmmtt = function () {\n    if (!this.date) return '';\n    var d = this.date;\n    var h = d.getHours();\n    var t = 'AM';\n    var m = d.getMinutes();\n    m = m < 10 ? '0' + m : m;\n    h = h >= 12 ? (t = 'PM', h - 12 || 12) : h == 0 ? 12 : h;\n    return h + ':' + m + ' ' + t;\n  };\n\n  AckDate.prototype.mmddyyyyhhmmtt = function (dateSep, spaceSep, timeSep, ttSep) {\n    if (spaceSep === void 0) {\n      spaceSep = ' ';\n    }\n\n    if (!this.date) return '';\n    return this.mmddyyyy(dateSep) + spaceSep + this.hhmmtt(timeSep, ttSep);\n  };\n\n  AckDate.prototype.hhmm = function (timeSep) {\n    if (timeSep === void 0) {\n      timeSep = ':';\n    }\n\n    if (!this.date) return '';\n    var d = this.date;\n    var timeSep = timeSep || ':';\n    var h = d.getHours();\n    var m = d.getMinutes();\n    m = m < 10 ? '0' + m : m;\n    h = h >= 12 ? h - 12 || 12 : h == 0 ? 12 : h;\n    return ('0' + h).slice(-2) + timeSep + m;\n  };\n\n  AckDate.prototype.hhmmtt = function (timeSep, ttSep) {\n    if (timeSep === void 0) {\n      timeSep = ':';\n    }\n\n    if (ttSep === void 0) {\n      ttSep = ' ';\n    }\n\n    if (!this.date) return '';\n    var d = this.date;\n    var h = d.getHours();\n    var t = 'AM';\n    var m = d.getMinutes();\n    m = m < 10 ? '0' + m : m;\n    h = h >= 12 ? (t = 'PM', h - 12 || 12) : h == 0 ? 12 : h;\n    return ('0' + h).slice(-2) + timeSep + m + ttSep + t;\n  };\n\n  AckDate.prototype.hhmmsstt = function (timeSep, ttSep) {\n    if (!this.date) return '';\n    var d = this.date;\n    var timeSep = timeSep || ':';\n    var ttSep = ttSep == null ? ' ' : ttSep;\n    var h = d.getHours();\n    var t = 'AM';\n    var m = d.getMinutes();\n    m = m < 10 ? '0' + m : m;\n    h = h >= 12 ? (t = 'PM', h - 12 || 12) : h == 0 ? 12 : h;\n    var s = ('0' + d.getSeconds()).slice(-2);\n    return ('0' + h).slice(-2) + timeSep + m + timeSep + s + ttSep + t;\n  };\n\n  AckDate.prototype.storageFormat = function (dateSep, spaceSep, timeSep, milsecSep) {\n    if (dateSep === void 0) {\n      dateSep = '-';\n    }\n\n    if (spaceSep === void 0) {\n      spaceSep = ' ';\n    }\n\n    if (!this.date) return '';\n    return this.date.getFullYear() + dateSep + this.mmdd(dateSep) + spaceSep + this.hhmmssl(timeSep, milsecSep);\n  };\n\n  AckDate.prototype.yyyymmdd = function (sep) {\n    if (sep === void 0) {\n      sep = \"/\";\n    }\n\n    if (!this.date) return '';\n    return this.year() + sep + this.mmdd(sep);\n  };\n\n  AckDate.prototype.mmddyyyy = function (sep) {\n    if (sep === void 0) {\n      sep = \"/\";\n    }\n\n    if (!this.date) return '';\n    var d = this.date;\n    return this.mmdd(sep) + sep + d.getFullYear();\n  };\n\n  AckDate.prototype.mdyyyy = function (sep) {\n    if (sep === void 0) {\n      sep = \"/\";\n    }\n\n    if (!this.date) return '';\n    var d = this.date;\n    return this.md(sep) + sep + d.getFullYear();\n  };\n\n  AckDate.prototype.mdyy = function (sep) {\n    if (sep === void 0) {\n      sep = \"/\";\n    }\n\n    if (!this.date) return '';\n    return this.md(sep) + sep + this.yy();\n  };\n\n  AckDate.prototype.mmddyy = function (sep) {\n    if (sep === void 0) {\n      sep = \"/\";\n    }\n\n    if (!this.date) return '';\n    var r = this.mmddyyyy(sep);\n    return r.substring(0, r.length - 4) + r.substring(r.length - 2, r.length);\n  };\n\n  AckDate.prototype.yy = function () {\n    if (!this.date) return '';\n    return this.date.getFullYear().toString().substring(2, 4);\n  };\n\n  AckDate.prototype.mmdd = function (sep) {\n    if (!this.date) return '';\n    sep = sep == null ? '/' : sep;\n    var d = this.date;\n    return twoDigit(d.getMonth() + 1) + sep + twoDigit(d.getDate());\n  };\n\n  AckDate.prototype.md = function (sep) {\n    if (!this.date) return '';\n    sep = sep == null ? '/' : sep;\n    var d = this.date;\n    return d.getMonth() + 1 + sep + d.getDate();\n  };\n\n  return AckDate;\n}();\n\nexport { AckDate };\nexport function dateObjectBy(date, format) {\n  if (date != null) {\n    switch (date.constructor) {\n      case AckDate:\n        return date.date;\n\n      case Date:\n        return date;\n\n      case String:\n        return dateStringToDate(date, format);\n\n      default:\n        return new Date(date);\n    }\n  }\n\n  return date || new Date();\n}\nexport function toDate(date, format) {\n  return date === null ? null : date == null ? new Date() : dateObjectBy(date, format);\n}\nexport function getTimezoneStamp(date, seperator) {\n  date = date || new Date();\n  var value = new Date(date).toString().match(/([-\\+][0-9]+)\\s/)[1];\n\n  if (seperator) {\n    value = value.substring(0, value.length - 2) + seperator + value.substring(value.length - 2, value.length);\n  }\n\n  return value;\n}\nexport function dateAddDay(d, amount) {\n  if (amount === void 0) {\n    amount = 1;\n  }\n\n  var dat = new Date(d);\n  dat.setDate(dat.getDate() + amount);\n  return dat;\n}\nexport function startOfDateDay(date) {\n  date = new Date(new Date(date).setHours(0));\n  date = new Date(date.setMinutes(0));\n  date = new Date(date.setSeconds(0));\n  return new Date(date.setMilliseconds(0));\n}\nexport function endOfDateDay(date) {\n  date = new Date(new Date(date).setHours(23));\n  date = new Date(date.setMinutes(59));\n  date = new Date(date.setSeconds(59));\n  return new Date(date.setMilliseconds(999));\n}\nexport function dateStringToDate(date, format) {\n  if (format) {\n    return new Date(moment(date, format));\n  }\n\n  var num = Number(date);\n\n  if (!isNaN(num)) {\n    return new Date(num);\n  }\n\n  var isZoned = date.substring(date.length - 1, date.length) == 'Z';\n  var isFirstFourDigits = date.length > 8 && !isNaN(date.substring(0, 4)) && !isZoned;\n  var slash = date.substring(4, 5);\n\n  if (isFirstFourDigits && isNaN(slash)) {\n    var dateSplit = date.split(slash);\n    var month = dateSplit[1];\n    var day = dateSplit[2];\n    var year = dateSplit[0];\n    var dateOnly = dateSplit.length == 3;\n    dateSplit[0] = year;\n    dateSplit[1] = month;\n    dateSplit[2] = day;\n    date = dateSplit.join(slash);\n\n    if (dateOnly) {\n      return new Date(year, month - 1, day);\n    }\n  }\n\n  return new Date(date);\n}\nexport function twoDigit(n) {\n  return ('0' + n).slice(-2);\n}\nexport function isDate(date) {\n  if (!date) return false;\n  var isRawDate = date.constructor == Date && !isNaN(date.getTime());\n  if (isRawDate) return true;\n  if (date.search) return date.search(/^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$/) >= 0;\n  return false;\n}\nexport function yearByDate(d) {\n  return d.getFullYear();\n}\nexport function getMonthIndexByString(mon) {\n  return monthLcaseNameArray.indexOf(mon.toLowerCase());\n}\nexport var monthNameArray = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport var monthLcaseNameArray = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\nexport var monthAbbrArray = ['Jan', 'Feb', 'Mar', 'Apr', 'Ma', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\nexport var dayNameArray = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport var dayAbbrArray = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nexport function dateYearDiff(d0, d1) {\n  return Math.abs(d0.getFullYear() - d1.getFullYear());\n}\nexport function dateYearDiffFloor(d0, d1) {\n  var diff = dateDayDiff(d0, d1);\n  return Math.floor(diff / 365);\n}\n\nvar stdTimezoneOffset = function (d) {\n  var jan = new Date(d.getFullYear(), 0, 1);\n  var jul = new Date(d.getFullYear(), 6, 1);\n  return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n};\n\nexport function dateMonthDiff(date0, date1) {\n  date0 = new Date(date0);\n  date1 = new Date(date1);\n  var result = date1.getMonth() + 12 * date1.getFullYear() - (date0.getMonth() + 12 * date0.getFullYear());\n  return Math.abs(result);\n}\nexport function dateMonthDiffFloor(date0, date1) {\n  date0 = new Date(date0);\n  date1 = new Date(date1);\n  var monthsPlusYears0 = date0.getMonth() + 12 * date0.getFullYear();\n  var monthsPlusYears1 = date1.getMonth() + 12 * date1.getFullYear();\n  var result = monthsPlusYears1 - monthsPlusYears0;\n\n  if (result === 0) {\n    return result;\n  }\n\n  if (date0.getDate() > date1.getDate()) {\n    return Math.abs(result - 1);\n  }\n\n  return Math.abs(result);\n}\nexport function dateWeekDiff(date0, date1) {\n  date0 = toDate(date0);\n  date1 = toDate(date1);\n  var diff = weekOfDate(date1) + 52 * date1.getFullYear() - (weekOfDate(date0) + 52 * date0.getFullYear());\n  return Math.abs(diff);\n}\nexport function weekOfDate(date) {\n  var d = startOfDateDay(toDate(date));\n  var onejan = new Date(d.getFullYear(), 0, 1);\n  var nowDate = d.getTime();\n  var calc = ((nowDate - onejan.getTime()) / 86400000 + onejan.getDay() + 1) / 7;\n  return Math.ceil(calc);\n}\nexport function parseTimeString(date) {\n  var dDate = new Date(date);\n\n  if (dDate != 'Invalid Date') {\n    return {\n      hour: dDate.getHours(),\n      minute: dDate.getMinutes()\n    };\n  }\n\n  var hour, minute, tt;\n  var tArray = date.split(':');\n  var hour = tArray[0];\n\n  if (tArray.length > 1) {\n    minute = tArray[1];\n    minute = minute.split(' ');\n\n    if (minute.length > 1) {\n      tt = minute[1];\n      var isPm = tt.toLowerCase() == 'pm';\n\n      if (hour <= 11 && isPm) {\n        hour = Number(hour) + 12;\n      } else if (hour == 12 && !isPm) {\n        hour = 0;\n      }\n    }\n\n    minute = Number(minute[0]);\n  }\n\n  return {\n    hour: hour,\n    minute: minute\n  };\n}\nexport function toDecimal(n, p) {\n  if (p === void 0) {\n    p = 2;\n  }\n\n  var m = Math.pow(10, p);\n  var f = (Math.round(n * m) / m).toFixed(p);\n  return Number(f);\n}\nexport function method(d) {\n  return new AckDate(d);\n}\nexport function datesSecondDiff(date, date2, decimals) {\n  date2 = dateObjectBy(date2 || new Date());\n  var dif = date.getTime() - date2.getTime();\n  var Seconds_from_T1_to_T2 = dif / 1000;\n  var rtn = Math.abs(Seconds_from_T1_to_T2);\n\n  if (decimals) {\n    decimals = Number(decimals) && !isNaN(decimals) ? decimals : 2;\n    rtn = toDecimal(rtn, decimals);\n  } else {\n    rtn = Math.floor(rtn);\n  }\n\n  return rtn;\n}\nexport function datesMinuteDiff(date, date2, roundUp) {\n  if (roundUp === void 0) {\n    roundUp = false;\n  }\n\n  date2 = toDate(date2 == null ? new Date() : date2);\n  var hourDiff = date2 - date.getTime();\n  var minDiff = hourDiff / 60 / 1000;\n  var hDiff = hourDiff / 3600 / 1000;\n  var hours = Math.floor(hDiff);\n  var mins = minDiff - 60 * hours;\n  var calc = Math.abs(hours * 60 + mins);\n  return roundUp ? Math.ceil(calc) : Math.floor(calc);\n}\nexport function momentDateDiff(m, m2, options) {\n  var mDate = m.toDate();\n  var m2Date = m2.toDate();\n  var diffDate = new Date(Math.abs(mDate.getTime() - m2Date.getTime()));\n  var mDiffDate = moment(diffDate);\n  if (!options) return mDiffDate;\n\n  if (options.roundUpMins) {\n    var needsRounding = diffDate.getSeconds() > 0;\n\n    if (needsRounding) {\n      mDiffDate.add(1, 'minute').startOf('minute');\n    }\n  }\n\n  if (options.roundDownMins) {\n    var needsRounding = diffDate.getSeconds() > 0;\n\n    if (needsRounding) {\n      mDiffDate.add(-1, 'minute').startOf('minute');\n    }\n  }\n\n  if (options.roundUpHours) {\n    var needsRounding = datesMinuteDiff(mDate, m2Date) % 60 > 0;\n\n    if (needsRounding) {\n      mDiffDate.add(1, 'hour').startOf('hour');\n    }\n  }\n\n  if (options.roundDownHours) {\n    var needsRounding = datesMinuteDiff(mDate, m2Date) % 60 > 0;\n\n    if (needsRounding) {\n      mDiffDate.add(-1, 'hour').startOf('hour');\n    }\n  }\n\n  return mDiffDate;\n}\nexport function dateDayDiff(date0, date) {\n  var dateCalc = date0.getTime() - toDate(date).getTime();\n  var calc = Math.floor(dateCalc / 86400000);\n  return Math.abs(calc);\n}","map":null,"metadata":{},"sourceType":"module"}