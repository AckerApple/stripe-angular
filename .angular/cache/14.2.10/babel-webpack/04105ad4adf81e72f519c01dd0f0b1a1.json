{"ast":null,"code":"import { method as objectMethod } from \"./object\";\nimport { method as numberMethod } from \"./number\";\nimport { method as stringMethod } from \"./string\";\nimport { method as binaryMethod } from \"./binary\";\nimport { method as base64Method } from \"./base64\";\nimport { method as arrayMethod } from \"./array\";\nimport { method as queryObjectMethod } from \"./queryObject\";\nimport { method as weekMethod } from \"./week\";\nimport { method as monthMethod } from \"./month\";\nimport { method as yearMethod } from \"./year\";\nimport { method as dateMethod } from \"./date\";\nimport { method as timeMethod } from \"./time\";\nimport { method as methodMethod } from \"./method\";\nimport { ackInjector } from \"./ackInjector\";\nimport { jError } from \"./error\";\n\nvar ackExpose = function () {\n  function ackExpose($var) {\n    if (!this) return new ackExpose($var);\n    this.$var = $var;\n    return this;\n  }\n\n  ackExpose.prototype.throwBy = function (ob, msg) {\n    if (ob) {\n      throw ob;\n    } else if (msg) {\n      throw new Error(msg);\n    } else {\n      throw new Error('An unexpected error has occured');\n    }\n  };\n\n  ackExpose.prototype.logArrayTo = function (array, logTo) {\n    logTo.apply(logTo, array);\n  };\n\n  ackExpose.injector = function ($scope) {\n    return new ackInjector($scope);\n  };\n\n  ackExpose.error = function (v) {\n    return new jError(v);\n  };\n\n  ackExpose.number = function (v) {\n    return numberMethod(v);\n  };\n\n  ackExpose.object = function (v) {\n    return objectMethod(v);\n  };\n\n  ackExpose.string = function (v) {\n    return stringMethod(v);\n  };\n\n  ackExpose.binary = function (v) {\n    return binaryMethod(v);\n  };\n\n  ackExpose.base64 = function (v) {\n    return base64Method(v);\n  };\n\n  ackExpose.method = function (v) {\n    return methodMethod(v);\n  };\n\n  ackExpose.array = function (v) {\n    return arrayMethod(v);\n  };\n\n  ackExpose.queryObject = function (v) {\n    return queryObjectMethod(v);\n  };\n\n  ackExpose.week = function (v) {\n    return weekMethod(v);\n  };\n\n  ackExpose.month = function (v) {\n    return monthMethod(v);\n  };\n\n  ackExpose.year = function (v) {\n    return yearMethod(v);\n  };\n\n  ackExpose.date = function (v) {\n    return dateMethod(v);\n  };\n\n  ackExpose.time = function (v) {\n    return timeMethod(v);\n  };\n\n  ackExpose.prototype.getSimpleClone = function () {\n    var target = {};\n\n    for (var i in this.$var) {\n      target[i] = this.$var[i];\n    }\n\n    return target;\n  };\n\n  ackExpose.prototype.get = function (name, def) {\n    if (!name) return this.$var;\n    if (this.$var && this.$var[name] != null) return this.$var[name];\n    var lcase = name.toLowerCase();\n\n    for (var key in this.$var) {\n      if (lcase == key.toLowerCase()) return this.$var[key];\n    }\n\n    return def;\n  };\n\n  ackExpose.prototype.stringify = function (spacing) {\n    spacing = spacing == null ? 2 : spacing;\n    return JSON.stringify(this.$var, null, spacing);\n  };\n\n  ackExpose.prototype.dump = function (spacing) {\n    return this.stringify(spacing);\n  };\n\n  ackExpose.prototype.getBit = function () {\n    var b = this.getBoolean();\n\n    if (b && b.constructor == Number && b < 0) {\n      b = 0;\n    }\n\n    return b ? 1 : 0;\n  };\n\n  ackExpose.prototype.nullsToEmptyString = function () {\n    for (var key in this.$var) {\n      if (this.$var[key] == null) {\n        this.$var[key] = '';\n      }\n    }\n\n    return this;\n  };\n\n  ackExpose.prototype.getBoolean = function () {\n    if (this.$var == null || !this.$var.constructor) return false;\n    var a = this.$var;\n\n    if (a.constructor == String) {\n      a = a.toLowerCase();\n\n      if (a === 'y' || a === 'yes') {\n        return true;\n      }\n\n      if (a === 'no' || a === 'n') {\n        return false;\n      }\n\n      try {\n        a = JSON.parse(a);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    if (a != null && (a.constructor == Number || a.constructor == Boolean)) {\n      return a;\n    }\n\n    return null;\n  };\n\n  ackExpose.prototype.isBooleanLike = function () {\n    if (this.$var == null || !this.$var.constructor) return false;\n    return this.getBoolean() !== null;\n  };\n\n  return ackExpose;\n}();\n\nexport { ackExpose };","map":null,"metadata":{},"sourceType":"module"}