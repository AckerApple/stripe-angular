{"ast":null,"code":"import { removeValues } from './removeValues.function';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./menu-options.component\";\n\nfunction PastesMenuComponent_menu_options_2_ng_container_1_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ÉµÉµgetCurrentView();\n\n    i0.ÉµÉµelementStart(0, \"a\", 6);\n    i0.ÉµÉµlistener(\"click\", function PastesMenuComponent_menu_options_2_ng_container_1_ng_container_1_ng_template_1_Template_a_click_0_listener() {\n      i0.ÉµÉµrestoreView(_r8);\n      const item_r2 = i0.ÉµÉµnextContext(2).$implicit;\n      const ctx_r6 = i0.ÉµÉµnextContext(2);\n      return i0.ÉµÉµresetView(ctx_r6.pasteByPaste(item_r2));\n    });\n    i0.ÉµÉµpipe(1, \"json\");\n    i0.ÉµÉµtext(2);\n    i0.ÉµÉµelementStart(3, \"strong\");\n    i0.ÉµÉµtext(4);\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµtext(5);\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ÉµÉµnextContext(2).$implicit;\n    const ctx_r5 = i0.ÉµÉµnextContext(2);\n    i0.ÉµÉµproperty(\"title\", item_r2.pasteKey + \": \" + (item_r2.value != null && i0.ÉµÉµpipeBind1(1, 4, item_r2.value)) || item_r2.api[item_r2.valueKey]);\n    i0.ÉµÉµadvance(2);\n    i0.ÉµÉµtextInterpolate1(\"\", item_r2.pasteKey && (item_r2.value || item_r2.api[item_r2.valueKey]) === ctx_r5.api[item_r2.pasteKey] ? \"\\u2611\\uFE0F\" : \"\\u2199\\uFE0F\", \" set \");\n    i0.ÉµÉµadvance(2);\n    i0.ÉµÉµtextInterpolate(item_r2.pasteKey);\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµtextInterpolate1(\" = \", item_r2.title || item_r2.value || (item_r2.api == null ? null : item_r2.api.title) || item_r2.api[item_r2.valueKey], \"\");\n  }\n}\n\nfunction PastesMenuComponent_menu_options_2_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementContainerStart(0);\n    i0.ÉµÉµtemplate(1, PastesMenuComponent_menu_options_2_ng_container_1_ng_container_1_ng_template_1_Template, 6, 6, \"ng-template\", null, 5, i0.ÉµÉµtemplateRefExtractor);\n    i0.ÉµÉµelementContainerEnd();\n  }\n}\n\nfunction PastesMenuComponent_menu_options_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementContainerStart(0);\n    i0.ÉµÉµtemplate(1, PastesMenuComponent_menu_options_2_ng_container_1_ng_container_1_Template, 3, 0, \"ng-container\", 4);\n    i0.ÉµÉµelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"ngIf\", item_r2.value || item_r2.api && item_r2.api[item_r2.valueKey]);\n  }\n}\n\nfunction PastesMenuComponent_menu_options_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"menu-options\", 2);\n    i0.ÉµÉµtemplate(1, PastesMenuComponent_menu_options_2_ng_container_1_Template, 2, 1, \"ng-container\", 3);\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"ngForOf\", ctx_r0.pastes);\n  }\n} // declare type PasteFav = [string, string, string | ((data: any) => any)]\n\n\nexport let PastesMenuComponent = /*#__PURE__*/(() => {\n  class PastesMenuComponent {\n    pasteByPaste(item) {\n      try {\n        this.pasteFrom(item, item.api || item.$api());\n      } catch (err) {\n        console.error(`ðŸ”´ Failed to paste by config`, {\n          api: this.api,\n          paste: item\n        }, err);\n      }\n    }\n\n    pasteFrom(pasteConfig, api) {\n      pasteFromOnto(pasteConfig, api, this.api);\n    }\n\n  }\n\n  PastesMenuComponent.Éµfac = function PastesMenuComponent_Factory(t) {\n    return new (t || PastesMenuComponent)();\n  };\n\n  PastesMenuComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: PastesMenuComponent,\n    selectors: [[\"pastes-menu\"]],\n    inputs: {\n      pastes: \"pastes\",\n      api: \"api\"\n    },\n    decls: 3,\n    vars: 1,\n    consts: [[3, \"click\"], [\"title\", \"quick pastes\", 4, \"ngIf\"], [\"title\", \"quick pastes\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"option\", \"\"], [1, \"pointer\", \"pad-xxs\", \"hover-bg-energized\", \"text-xxs\", \"active-bg-balanced\", 3, \"title\", \"click\"]],\n    template: function PastesMenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"a\", 0);\n        i0.ÉµÉµlistener(\"click\", function PastesMenuComponent_Template_a_click_0_listener() {\n          return ctx.showPastes = !ctx.showPastes;\n        });\n        i0.ÉµÉµtext(1, \"\\uD83D\\uDCA0 \");\n        i0.ÉµÉµtemplate(2, PastesMenuComponent_menu_options_2_Template, 2, 1, \"menu-options\", 1);\n        i0.ÉµÉµelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ÉµÉµadvance(2);\n        i0.ÉµÉµproperty(\"ngIf\", ctx.showPastes);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.MenuOptionsComponent, i1.JsonPipe],\n    encapsulation: 2\n  });\n  return PastesMenuComponent;\n})();\nexport function pasteFromOnto(pasteConfig, apiFrom, apiOnto) {\n  if (pasteConfig.pasteKey) {\n    pasteKeyFromOnto(pasteConfig.pasteKey, pasteConfig, apiFrom, apiOnto);\n  } // sub paste definitions (meaning one paste actually results in multiple things pasted)\n\n\n  if (pasteConfig.pastes) {\n    pasteConfig.pastes.forEach(paste => pasteFromOnto(paste, apiFrom, apiOnto));\n  }\n}\nexport function cloneRemoveKeys(keys, cleanData) {\n  const deepClone = JSON.parse(JSON.stringify(cleanData));\n  return removeKeys(keys, deepClone);\n}\nexport function removeKeys(keys, value) {\n  keys.map(varName => {\n    const name = varName.trim();\n    delete value[name]; // flattened delete 'something' or 'something.something'\n    // delete by dot notation\n\n    const dotNotation = name.split('.');\n    dotNotation.reduce((all, now, index) => {\n      if ([undefined, null].includes(all)) {\n        return;\n      }\n\n      if (index === dotNotation.length - 1) {\n        return delete all[now];\n      }\n\n      return all[now];\n    }, value);\n    return varName;\n  });\n  return value;\n}\n\nfunction pasteKeyFromOnto(pasteKey, item, from, onto) {\n  const keyName = pasteKey; // || 'id'\n\n  const value = getPasteValueFrom(item, from); // validate to paste\n\n  if (item.valueMatches) {\n    const valid = pasteValueFromMatches(item, from);\n\n    if (!valid) {\n      return;\n    }\n  }\n\n  pasteValueOnto(onto, keyName, value);\n\n  if (item.afterRemoveKeys) {\n    removeKeys(item.afterRemoveKeys, onto);\n  }\n}\n\nfunction getPasteValueFrom(item, from) {\n  const asPaste = item;\n  const valueKey = asPaste.pasteValueKey || item.valueKey;\n  let value = asPaste.value;\n\n  if (valueKey) {\n    value = valueKey.split('.').reduce((all, now) => all ? all[now] : undefined, from);\n  }\n\n  if (asPaste.removeKeys) {\n    value = cloneRemoveKeys(asPaste.removeKeys, value); // remove keys from value\n  }\n\n  if (asPaste.removeValues) {\n    value = removeValues(value, asPaste.removeValues);\n  }\n\n  return value;\n}\n\nfunction pasteValueFromMatches(item, from) {\n  if (!item.valueMatches) {\n    return false;\n  }\n\n  return item.valueMatches.find(valConfig => {\n    const value = getPasteValueFrom(valConfig, from);\n    const found = value.search(new RegExp(valConfig.expression, 'gi')) >= 0;\n    return found;\n  }) ? true : false;\n}\n\nfunction pasteValueOnto(onto, keyName, value) {\n  const keys = keyName.split('.'); // paste flattened value\n\n  onto[keyName] = value;\n  keys.forEach((key, index) => {\n    if (index + 1 === keys.length) {\n      return onto[key] = value;\n    }\n\n    onto = onto[key] || (onto[key] = {});\n  });\n}","map":null,"metadata":{},"sourceType":"module"}