{"ast":null,"code":"/** web browser intended functionality. May work in server side */\nimport * as hmacSHA256 from 'crypto-js/hmac-sha256';\nimport * as formatHex from 'crypto-js/format-hex';\n/**\n * Generates a header to be used for webhook mocking\n *\n * @typedef {object} opts\n * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n * @property {string} secret - Stripe webhook secret 'whsec_...'\n * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n * @property {string} signature - Computed webhook signature\n */\n\nexport function generateTestHeaderString(opts) {\n  if (!opts) {\n    throw new Error('Options are required');\n  }\n\n  opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n  opts.scheme = opts.scheme || 'v1';\n  opts.signature = opts.signature || _computeSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n  const generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n  return generatedHeader;\n}\n\nfunction _computeSignature(payload, secret) {\n  const sha = hmacSHA256.default || hmacSHA256; // import style has been known to change on us\n\n  const data = sha(payload, secret);\n  const hmacDigest = formatHex.stringify({\n    ciphertext: data\n  });\n  return hmacDigest;\n}","map":null,"metadata":{},"sourceType":"module"}