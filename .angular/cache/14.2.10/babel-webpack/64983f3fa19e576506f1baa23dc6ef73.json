{"ast":null,"code":"export const stripeServer = 'https://api.stripe.com/v1/';\nconst sampleAddress = {\n  city: 'Coconut Creek',\n  country: null,\n  line1: '1234 sw 1st ct',\n  line2: null,\n  postal_code: '33066',\n  state: 'FL'\n};\nexport const sample = {\n  metadata: {\n    testedUsing: 'stripe-angular',\n    author: 'Acker Apple'\n  },\n  owner: {\n    email: 'jenny.rosen@example.com',\n    name: 'jenny rosen',\n    phone: '561-561-5611',\n    address: sampleAddress\n  }\n};\n\nfunction objectToUriForm(ob, parentKey) {\n  let returnString = '';\n\n  if (!ob) {\n    return returnString;\n  } else if (Array.isArray(ob)) {\n    ob.forEach(value => {\n      returnString += `${parentKey}[]=${encodeURIComponent(value)}&`;\n    });\n  } else {\n    Object.keys(ob).forEach(key => {\n      const value = ob[key];\n      let endKey = key;\n      let stringValue = '';\n\n      if (parentKey) {\n        endKey = `${parentKey}[${key}]`;\n      }\n\n      switch (typeof value) {\n        case 'string':\n        case 'number':\n          stringValue = value.toString();\n          break;\n\n        case 'object':\n          if (parentKey) {\n            returnString += parentKey;\n            key = '[' + key + ']';\n          }\n\n          return returnString += objectToUriForm(value, key) + '&';\n      }\n\n      returnString += `${endKey}=${encodeURIComponent(stringValue)}` + '&';\n    });\n  }\n\n  if (returnString.length) {\n    returnString = returnString.substr(0, returnString.length - 1); // last &\n  }\n\n  return returnString;\n}\n\nexport function tryParse(data) {\n  try {\n    return JSON.parse(data);\n  } catch (err) {\n    return data;\n  }\n}\n\nfunction getUrlStorage() {\n  const urlQuery = new URLSearchParams(window.location.search);\n  const storageUrlString = urlQuery.get('storage');\n\n  if (!storageUrlString) {\n    return;\n  }\n\n  try {\n    return JSON.parse(storageUrlString);\n  } catch (err) {\n    console.error('error parsing url storage', err);\n  }\n}\n\nfunction getLocalStorage() {\n  const storageString = localStorage?.stripeAngular;\n\n  if (!storageString) {\n    return {};\n  }\n\n  try {\n    return JSON.parse(storageString);\n  } catch (err) {\n    console.error('error parsing local storage', err);\n  }\n}\n\nexport function getProjectLocalStorage() {\n  const storage = getUrlStorage() || getLocalStorage() || {};\n  storage.key = storage.key || localStorage?.stripeAnguarKey;\n  storage.privateKey = storage.privateKey || localStorage?.stripeAngularPrivateKey;\n  storage.privateKeys = storage.privateKeys || [];\n  storage.publicKeys = storage.publicKeys || [];\n  storage.webhookSigningSecrets = storage.webhookSigningSecrets instanceof Array ? storage.webhookSigningSecrets : [];\n  storage.webhookServers = storage.webhookServers || []; // 🏦 Plaid\n\n  storage.plaid = storage.plaid || {};\n  storage.plaid.clientIds = storage.plaid.clientIds || [];\n  storage.plaid.secrets = storage.plaid.secrets || [];\n  storage.requests = storage.requests || {\n    // passed along when token or sources created\n    source: {\n      owner: sample.owner,\n      metadata: sample.metadata\n    },\n    paymentMethod: {\n      metadata: sample.metadata\n    }\n  };\n  storage.metadata = storage.metadata || {};\n  storage.temp = {};\n  return storage;\n}\nexport function copyText(text) {\n  /* Get the text field */\n  var copyText = document.createElement('textarea');\n  copyText.value = text;\n  document.body.appendChild(copyText);\n  /* Select the text field */\n\n  copyText.select();\n  copyText.setSelectionRange(0, 99999);\n  /* For mobile devices */\n\n  /* Copy the text inside the text field */\n\n  document.execCommand(\"copy\");\n  document.body.removeChild(copyText); // copyText.parentNode.removeChild(copyText)\n}\nexport function changeKey(scope, value, keys = ['data']) {\n  delete scope.error; // stripe-angular only\n\n  let current = scope;\n\n  while (keys.length > 2) {\n    current = current[keys.shift()];\n  }\n\n  try {\n    eval('value = ' + value); // allow loose js to be cast to json\n\n    current[keys[0]] = value;\n  } catch (err) {\n    // stripe-angular only\n    scope.error = Object.getOwnPropertyNames(err).reverse().reduce((a, key) => (a[key] = err[key]) && a || a, {});\n    console.error(`failed to parse object key ${keys[0]}`);\n    throw err;\n  }\n\n  return current[keys[0]];\n}\nexport const stringIdentifiers = /\\/:[^\\/]+(?=\\/|$)/g;\nexport function getStringIdentifiers(string) {\n  return [...string.matchAll(stringIdentifiers)];\n}\nexport const stringInterpolations = /\\$\\{\\s*[^\\}]+\\s*\\}/g;\nexport function getStringInterpolations(string) {\n  return [...string.matchAll(stringInterpolations)];\n}\nexport function flatten(data, response = data, {\n  flatKey = \"\",\n  onlyLastKey = false,\n  seen = [],\n  original = data\n} = {}) {\n  const entries = Object.entries(data);\n\n  for (const [key, value] of entries) {\n    let newFlatKey;\n\n    if (!isNaN(parseInt(key)) && flatKey.includes(\"[]\")) {\n      newFlatKey = (flatKey.charAt(flatKey.length - 1) == \".\" ? flatKey.slice(0, -1) : flatKey) + `[${key}]`;\n    } else if (!flatKey.includes(\".\") && flatKey.length > 0) {\n      newFlatKey = `${flatKey}.${key}`;\n    } else {\n      newFlatKey = `${flatKey}${key}`;\n    }\n\n    const isValObject = typeof value === \"object\" && value !== null && Object.keys(value).length > 0;\n\n    if (isValObject && !seen.includes(value) && value !== original) {\n      seen.push(value);\n      flatten(value, response, {\n        flatKey: `${newFlatKey}.`,\n        onlyLastKey,\n        seen,\n        original\n      });\n    } else {\n      if (onlyLastKey) {\n        newFlatKey = newFlatKey.split(\".\").pop();\n      }\n\n      if (Array.isArray(response)) {\n        response.push({\n          [newFlatKey.replace(\"[]\", \"\")]: value\n        });\n      } else {\n        response[newFlatKey.replace(\"[]\", \"\")] = value;\n      }\n    }\n  }\n\n  return response;\n}\nexport function removeFlats(data) {\n  const removes = Object.keys(data).filter(key => key.indexOf('.') >= 0);\n  removes.forEach(key => delete data[key]);\n  return data;\n}\nexport function getSaveableStorage(storage) {\n  const cloneStorage = JSON.parse(JSON.stringify(storage));\n  delete cloneStorage.temp;\n\n  if (!cloneStorage.saveKeyLocally) {\n    delete cloneStorage.key;\n  }\n\n  if (!cloneStorage.savePrivateKeyLocally) {\n    delete cloneStorage.privateKey;\n    delete cloneStorage.webhookSigningSecret;\n  }\n\n  if (!cloneStorage.saveRequestsLocal) {\n    delete cloneStorage.requests;\n  }\n\n  return cloneStorage;\n}","map":null,"metadata":{},"sourceType":"module"}