{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, Output, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\nfunction StripeSource_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵtext(2, \"Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction StripeCard_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵtext(2, \"Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction StripeBank_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵtext(2, \"Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nconst STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');\nconst STRIPE_OPTIONS = new InjectionToken('Stripe Options');\nlet StripeScriptTag = /*#__PURE__*/(() => {\n  class StripeScriptTag {\n    constructor(document, key, options) {\n      this.document = document;\n      this.src = \"https://js.stripe.com/v3/\";\n      this.window = this.document.defaultView;\n      this.load = this.injectIntoHead();\n      if (key) this.setPublishableKey(key, options);\n    }\n\n    promiseStripe() {\n      return this.load;\n    }\n\n    promiseInstance() {\n      return this.promiseStripe().then(stripe => {\n        if (!this.StripeInstance) {\n          const err = new Error(\"Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()\");\n          err[\"code\"] = \"STRIPEKEYNOTSET\";\n          throw err; //return Promise.reject( err )\n        }\n\n        return this.StripeInstance;\n      });\n    }\n\n    setPublishableKey(key, options) {\n      return this.load.then(() => this.StripeInstance = this.Stripe(key, options));\n    }\n\n    injectIntoHead() {\n      if (this.window && this.window[\"Stripe\"]) {\n        return Promise.resolve(this.Stripe = this.window[\"Stripe\"]);\n      }\n\n      return new Promise((res, rej) => {\n        const head = this.getTargetTagDropElement();\n        const script = this.document.createElement(\"script\");\n        script.setAttribute(\"src\", this.src);\n        script.setAttribute(\"type\", \"text/javascript\");\n        script.addEventListener(\"load\", () => {\n          this.Stripe = this.grabStripe();\n          res(this.Stripe);\n        });\n        head.appendChild(script);\n      });\n    }\n\n    grabStripe() {\n      return window[\"Stripe\"];\n    }\n\n    getTargetTagDropElement() {\n      let elm = this.document.getElementsByTagName(\"head\");\n      if (elm.length) return elm[0];\n      return this.document.getElementsByTagName(\"body\")[0];\n    }\n\n  }\n\n  StripeScriptTag.ɵfac = function StripeScriptTag_Factory(t) {\n    return new (t || StripeScriptTag)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(STRIPE_PUBLISHABLE_KEY), i0.ɵɵinject(STRIPE_OPTIONS));\n  };\n\n  StripeScriptTag.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StripeScriptTag,\n    factory: StripeScriptTag.ɵfac,\n    providedIn: 'root'\n  });\n  return StripeScriptTag;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StripeComponent = /*#__PURE__*/(() => {\n  class StripeComponent {\n    constructor(StripeScriptTag) {\n      this.StripeScriptTag = StripeScriptTag;\n      this.catcher = new EventEmitter();\n      this.invalidChange = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.init();\n    }\n\n    init() {\n      return this.StripeScriptTag.promiseInstance().then(i => this.stripe = i);\n    }\n\n  }\n\n  StripeComponent.ɵfac = function StripeComponent_Factory(t) {\n    return new (t || StripeComponent)(i0.ɵɵdirectiveInject(StripeScriptTag));\n  };\n\n  StripeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StripeComponent,\n    selectors: [[\"stripe-component\"]],\n    inputs: {\n      invalid: \"invalid\"\n    },\n    outputs: {\n      catcher: \"catch\",\n      invalidChange: \"invalidChange\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function StripeComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return StripeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StripeSource = /*#__PURE__*/(() => {\n  class StripeSource extends StripeComponent {\n    constructor(StripeScriptTag) {\n      super(StripeScriptTag);\n      this.StripeScriptTag = StripeScriptTag;\n      this.sourceChange = new EventEmitter();\n      this.paymentMethodChange = new EventEmitter();\n    }\n\n    createSource(extraData) {\n      delete this.invalid;\n      this.invalidChange.emit(this.invalid);\n      return this.stripe.createSource(this.elements, extraData).then(result => this.processSourceResult(result));\n    }\n\n    processSourceResult(result) {\n      if (result.error) {\n        const rError = result.error;\n\n        if (rError.type === \"validation_error\") {\n          this.invalidChange.emit(this.invalid = rError);\n        } else {\n          this.catcher.emit(rError);\n          throw rError;\n        }\n      }\n\n      const source = result.source;\n\n      if (source) {\n        this.sourceChange.emit(this.source = source);\n        return source;\n      }\n    }\n\n    createPaymentMethod(extraData) {\n      delete this.invalid;\n      this.invalidChange.emit(this.invalid);\n      return this.stripe.createPaymentMethod('card', this.elements, extraData).then(result => this.processPaymentMethodResult(result));\n    }\n\n    processPaymentMethodResult(result) {\n      if (result.error) {\n        const rError = result.error;\n\n        if (rError.type === \"validation_error\") {\n          this.invalidChange.emit(this.invalid = rError);\n        } else {\n          this.catcher.emit(rError);\n          throw rError;\n        }\n      }\n\n      const paymentMethod = result.paymentMethod;\n\n      if (paymentMethod) {\n        this.paymentMethodChange.emit(this.paymentMethod = paymentMethod);\n        return paymentMethod;\n      }\n    }\n\n  }\n\n  StripeSource.ɵfac = function StripeSource_Factory(t) {\n    return new (t || StripeSource)(i0.ɵɵdirectiveInject(StripeScriptTag));\n  };\n\n  StripeSource.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StripeSource,\n    selectors: [[\"stripe-source\"]],\n    inputs: {\n      source: \"source\",\n      paymentMethod: \"paymentMethod\"\n    },\n    outputs: {\n      sourceChange: \"sourceChange\",\n      paymentMethodChange: \"paymentMethodChange\"\n    },\n    exportAs: [\"StripeSource\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [2, \"color\", \"red\"]],\n    template: function StripeSource_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, StripeSource_ng_container_0_Template, 3, 0, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.StripeScriptTag.StripeInstance);\n      }\n    },\n    dependencies: [i2.NgIf],\n    encapsulation: 2\n  });\n  return StripeSource;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StripeCard = /*#__PURE__*/(() => {\n  class StripeCard extends StripeSource {\n    constructor(ElementRef, StripeScriptTag) {\n      super(StripeScriptTag);\n      this.ElementRef = ElementRef;\n      this.StripeScriptTag = StripeScriptTag;\n      this.tokenChange = new EventEmitter();\n      this.cardMounted = new EventEmitter();\n      this.complete = false;\n      this.completeChange = new EventEmitter();\n      this.changed = new EventEmitter();\n      this.drawn = false;\n    }\n\n    ngOnInit() {\n      super.init().then(() => this.redraw());\n    }\n\n    ngOnChanges(changes) {\n      if (this.drawn && (changes.options || changes.createOptions)) {\n        this.redraw();\n      }\n    }\n\n    redraw() {\n      if (this.drawn) {\n        this.elements.unmount();\n        this.elements.destroy();\n      }\n\n      this.elements = this.stripe.elements(this.createOptions).create('card', this.options);\n      this.elements.mount(this.ElementRef.nativeElement);\n      this.cardMounted.emit(this.elements);\n      this.elements.on('change', result => {\n        this.changed.emit(result);\n\n        if (result.complete || this.complete && !result.complete) {\n          this.completeChange.emit(this.complete = result.complete);\n        }\n      });\n      this.elements.addEventListener('change', result => {\n        if (result.error) {\n          this.invalidChange.emit(this.invalid = result.error);\n        }\n      });\n      this.drawn = true;\n    }\n\n    createToken(extraData) {\n      delete this.invalid;\n      this.invalidChange.emit(this.invalid);\n      return this.stripe.createToken(this.elements, extraData).then(result => {\n        if (result.error) {\n          if (result.error.type == \"validation_error\") {\n            this.invalidChange.emit(this.invalid = result.error);\n          } else {\n            this.catcher.emit(result.error);\n            throw result.error;\n          }\n        } else {\n          this.tokenChange.emit(this.token = result.token);\n          return result.token;\n        }\n      });\n    }\n\n  }\n\n  StripeCard.ɵfac = function StripeCard_Factory(t) {\n    return new (t || StripeCard)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(StripeScriptTag));\n  };\n\n  StripeCard.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StripeCard,\n    selectors: [[\"stripe-card\"]],\n    inputs: {\n      createOptions: \"createOptions\",\n      options: \"options\",\n      token: \"token\",\n      complete: \"complete\"\n    },\n    outputs: {\n      tokenChange: \"tokenChange\",\n      cardMounted: \"cardMounted\",\n      completeChange: \"completeChange\",\n      changed: \"changed\"\n    },\n    exportAs: [\"StripeCard\"],\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [2, \"color\", \"red\"]],\n    template: function StripeCard_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, StripeCard_ng_container_0_Template, 3, 0, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.StripeScriptTag.StripeInstance);\n      }\n    },\n    dependencies: [i2.NgIf],\n    encapsulation: 2\n  });\n  return StripeCard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StripeBank = /*#__PURE__*/(() => {\n  class StripeBank extends StripeComponent {\n    constructor(StripeScriptTag) {\n      super(StripeScriptTag);\n      this.StripeScriptTag = StripeScriptTag;\n      this.tokenChange = new EventEmitter();\n    }\n\n    createToken(data) {\n      delete this.invalid;\n      this.invalidChange.emit(this.invalid);\n      return this.stripe.createToken('bank_account', data).then(result => {\n        if (result.error) {\n          if (result.error.type == \"validation_error\") {\n            this.invalidChange.emit(this.invalid = result.error);\n          } else {\n            this.catcher.emit(result.error);\n            throw result.error;\n          }\n        } else {\n          this.tokenChange.emit(this.token = result.token);\n          return result.token;\n        }\n      });\n    }\n\n  }\n\n  StripeBank.ɵfac = function StripeBank_Factory(t) {\n    return new (t || StripeBank)(i0.ɵɵdirectiveInject(StripeScriptTag));\n  };\n\n  StripeBank.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StripeBank,\n    selectors: [[\"stripe-bank\"]],\n    inputs: {\n      options: \"options\",\n      token: \"token\"\n    },\n    outputs: {\n      tokenChange: \"tokenChange\"\n    },\n    exportAs: [\"StripeBank\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [2, \"color\", \"red\"]],\n    template: function StripeBank_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, StripeBank_ng_container_0_Template, 3, 0, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.StripeScriptTag.StripeInstance);\n      }\n    },\n    dependencies: [i2.NgIf],\n    encapsulation: 2\n  });\n  return StripeBank;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst declarations = [StripeComponent, StripeSource, StripeCard, StripeBank];\nlet StripeModule = /*#__PURE__*/(() => {\n  class StripeModule {\n    static forRoot(publishableKey, options) {\n      return {\n        ngModule: StripeModule,\n        providers: [StripeScriptTag, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }]\n      };\n    }\n\n  }\n\n  StripeModule.ɵfac = function StripeModule_Factory(t) {\n    return new (t || StripeModule)();\n  };\n\n  StripeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StripeModule\n  });\n  StripeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return StripeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @deprecated Please import `StripeModule` directly\n */\n\n\nconst Module = StripeModule;\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Module, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeBank, StripeCard, StripeComponent, StripeModule, StripeScriptTag, StripeSource }; //# sourceMappingURL=stripe-angular.mjs.map","map":null,"metadata":{},"sourceType":"module"}