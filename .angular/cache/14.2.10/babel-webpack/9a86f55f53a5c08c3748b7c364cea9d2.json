{"ast":null,"code":"var jXArray = function () {\n  function jXArray(array) {\n    this.union = this.appendArray;\n    this.array = array;\n    return this;\n  }\n\n  jXArray.prototype.each = function (method0, method1, method2, method3) {\n    if (!this.array) return this;\n\n    for (var x = 0; x < this.array.length; ++x) {\n      for (var a = 0; a < arguments.length; ++a) {\n        arguments[a].call(null, this.array[x], x, this.array.length);\n      }\n\n      this.array[x];\n    }\n\n    return this;\n  };\n\n  jXArray.prototype.distinct = function (method) {\n    if (!this.array) return this;\n    var distincts = [];\n\n    method = method || function (v) {\n      return v;\n    };\n\n    for (var x = 0; x < this.array.length; ++x) {\n      var a0 = this.array[x];\n      var isDef = false;\n\n      for (var xd = distincts.length - 1; xd >= 0; --xd) {\n        var item = distincts[xd];\n\n        if (method(a0) == method(item)) {\n          isDef = true;\n          break;\n        }\n      }\n\n      if (!isDef) distincts.push(a0);\n    }\n\n    this.array = distincts;\n    return this;\n  };\n\n  jXArray.prototype.objectify = function () {\n    if (!this.array.length) return {};\n    var x,\n        n,\n        s,\n        r = {};\n    s = this.array[0];\n\n    for (n in s) {\n      r[n] = [];\n    }\n\n    for (x = this.array.length - 1; x >= 0; --x) {\n      s = this.array[x];\n\n      for (n in s) {\n        r[n].unshift(s[n]);\n      }\n    }\n\n    return r;\n  };\n\n  jXArray.prototype.appendArray = function () {\n    for (var argIn = 0; argIn < arguments.length; ++argIn) {\n      var array = arguments[argIn];\n\n      for (var aI = 0; aI < array.length; ++aI) {\n        this.array.push(array[aI]);\n      }\n    }\n\n    return this;\n  };\n\n  jXArray.prototype.prependArray = function () {\n    for (var argIn = 0; argIn < arguments.length; ++argIn) {\n      var array = arguments[argIn];\n\n      for (var aI = array.length - 1; aI >= 0; --aI) {\n        this.array.unshift(array[aI]);\n      }\n    }\n\n    return this;\n  };\n\n  jXArray.prototype.reduce = function (method, initValue) {\n    var x = 0;\n\n    if (!initValue) {\n      initValue = this.array[0];\n      ++x;\n    }\n\n    for (; x < this.array.length; ++x) {\n      initValue = method(initValue, this.array[x], x, this.array);\n    }\n\n    return initValue;\n  };\n\n  jXArray.prototype.sum = function (method) {\n    return this.reduce(function (acc, val) {\n      return acc + val;\n    }, 0);\n  };\n\n  jXArray.prototype.average = function (method) {\n    var numArray = method ? this.map(method) : this.array;\n    var map = new jXArray(numArray).map(function (c, i, arr) {\n      return c / arr.length;\n    });\n    return new jXArray(map).reduce(function (p, c) {\n      return p + c;\n    });\n  };\n\n  jXArray.prototype.map = function (method) {\n    var newArray = [];\n\n    for (var x = 0; x < this.array.length; ++x) {\n      newArray.push(method(this.array[x], x, this.array));\n    }\n\n    return newArray;\n  };\n\n  jXArray.prototype.group = function (method, isIndexValue, grouptype) {\n    method = method ? method : function (v) {\n      return v;\n    };\n    grouptype = grouptype ? grouptype : 'sequence';\n    isIndexValue = isIndexValue == null ? 0 : isIndexValue;\n    var array = this.array;\n\n    if (grouptype == 'struct') {\n      var struct = {};\n\n      for (var x = 0; x < array.length; ++x) {\n        var a = array[x];\n        var v = method(a);\n        if (struct[v] == null) struct[v] = [];\n        struct[v].push(isIndexValue ? x : a);\n      }\n\n      return struct;\n    }\n\n    var rArray = [[]];\n    var cVal = 0;\n\n    for (var x = 0; x < array.length; ++x) {\n      var a = array[x];\n      var v = method(a);\n      if (cVal != v && x > 1) rArray.push([]);\n      cVal = v;\n      rArray[rArray.length - 1].push(isIndexValue ? x : a);\n    }\n\n    return rArray;\n  };\n\n  return jXArray;\n}();\n\nexport { jXArray };\nexport function method(path) {\n  return new jXArray(path);\n}","map":null,"metadata":{},"sourceType":"module"}