{"ast":null,"code":"module.exports = (data, opts = {}) => {\n  const {\n    sorted,\n    skipIndex,\n    ignorenull,\n    skipBracket,\n    useDot,\n    whitespace = '+'\n  } = opts;\n\n  const encode = value => String(value).replace(/[^ !'()~*]/gu, encodeURIComponent).replace(/ /g, whitespace).replace(/[!'()~*]/g, ch => `%${ch.charCodeAt().toString(16).slice(-2).toUpperCase()}`);\n\n  const keys = (obj, keyarr = Object.keys(obj)) => sorted ? keyarr.sort() : keyarr;\n\n  const filterjoin = arr => arr.filter(e => e).join('&');\n\n  const objnest = (name, obj) => filterjoin(keys(obj).map(key => useDot ? nest(`${name}.${key}`, obj[key]) : nest(`${name}[${key}]`, obj[key])));\n\n  const arrnest = (name, arr, brackets = skipBracket ? '' : '[]') => arr.length ? filterjoin(arr.map((elem, index) => skipIndex ? nest(name + brackets, elem) : nest(name + '[' + index + ']', elem))) : encode(name + brackets);\n\n  const setnest = (name, set) => filterjoin(Array.from(set).map(elem => nest(name, elem)));\n\n  const nest = (name, value, type = typeof value, f = null) => {\n    if (value === f) f = ignorenull ? f : encode(name) + '=' + f;else if (/string|number|boolean/.test(type)) f = encode(name) + '=' + encode(value);else if (Array.isArray(value)) f = arrnest(name, value);else if (value instanceof Set) f = setnest(name, value);else if (type === 'object') f = objnest(name, value);\n    return f;\n  };\n\n  return data && filterjoin(keys(data).map(key => nest(key, data[key])));\n};","map":null,"metadata":{},"sourceType":"script"}