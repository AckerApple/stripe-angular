{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateTestHeaderString = void 0;\n/** web browser intended functionality. May work in server side */\n\nconst hmacSHA256 = __importStar(require(\"crypto-js/hmac-sha256\"));\n\nconst formatHex = __importStar(require(\"crypto-js/format-hex\"));\n/**\n * Generates a header to be used for webhook mocking\n *\n * @typedef {object} opts\n * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n * @property {string} secret - Stripe webhook secret 'whsec_...'\n * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n * @property {string} signature - Computed webhook signature\n */\n\n\nfunction generateTestHeaderString(opts) {\n  if (!opts) {\n    throw new Error('Options are required');\n  }\n\n  opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n  opts.scheme = opts.scheme || 'v1';\n  opts.signature = opts.signature || _computeSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n  const generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n  return generatedHeader;\n}\n\nexports.generateTestHeaderString = generateTestHeaderString;\n\nfunction _computeSignature(payload, secret) {\n  const sha = hmacSHA256.default || hmacSHA256; // import style has been known to change on us\n\n  const data = sha(payload, secret);\n  const hmacDigest = formatHex.stringify({\n    ciphertext: data\n  });\n  return hmacDigest;\n}","map":null,"metadata":{},"sourceType":"script"}