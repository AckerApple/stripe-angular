import { InjectionToken } from '@angular/core';
export const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
export const STRIPE_OPTIONS = new InjectionToken('Stripe Options');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaXBlVHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjLyIsInNvdXJjZXMiOlsiU3RyaXBlVHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGNBQWMsQ0FBUyx3QkFBd0IsQ0FBQyxDQUFBO0FBQzFGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBd0IsZ0JBQWdCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBTVFJJUEVfUFVCTElTSEFCTEVfS0VZID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ1N0cmlwZSBQdWJsaXNoYWJsZSBLZXknKVxuZXhwb3J0IGNvbnN0IFNUUklQRV9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPFN0cmlwZUluc3RhbmNlT3B0aW9ucz4oJ1N0cmlwZSBPcHRpb25zJylcblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGV7XG4gIChzdHJpbmc6c3RyaW5nLG9wdGlvbnM/OlN0cmlwZUluc3RhbmNlT3B0aW9ucyk6U3RyaXBlSW5zdGFuY2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVJbnN0YW5jZXtcbiAgZWxlbWVudHMob3B0aW9ucz86IGVsZW1lbnRzLkVsZW1lbnRzQ3JlYXRlT3B0aW9ucyk6IGVsZW1lbnRzLkVsZW1lbnRzO1xuICBjcmVhdGVUb2tlbihlbGVtZW50OiBlbGVtZW50cy5FbGVtZW50LCBvcHRpb25zPzogVG9rZW5PcHRpb25zIHwgQmFua0FjY291bnRUb2tlbk9wdGlvbnMpOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+O1xuICBjcmVhdGVUb2tlbihuYW1lOiAnYmFua19hY2NvdW50Jywgb3B0aW9uczogQmFua0FjY291bnRUb2tlbk9wdGlvbnMpOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+O1xuICBjcmVhdGVUb2tlbihuYW1lOiAncGlpJywgb3B0aW9uczogUGlpVG9rZW5PcHRpb25zKTogUHJvbWlzZTxUb2tlblJlc3BvbnNlPjtcbiAgY3JlYXRlU291cmNlKGVsZW1lbnQ6IGVsZW1lbnRzLkVsZW1lbnQsIG9wdGlvbnM/OiB7IG93bmVyPzogT3duZXJJbmZvLCBtZXRhZGF0YT86IE1ldGFkYXRhIH0pOiBQcm9taXNlPFNvdXJjZVJlc3BvbnNlPjtcbiAgY3JlYXRlU291cmNlKG9wdGlvbnM6IFNvdXJjZU9wdGlvbnMpOiBQcm9taXNlPFNvdXJjZVJlc3BvbnNlPjtcbiAgcmV0cmlldmVTb3VyY2Uob3B0aW9uczogUmV0cmlldmVTb3VyY2VPcHRpb25zKTogUHJvbWlzZTxTb3VyY2VSZXNwb25zZT47XG4gIGNyZWF0ZVBheW1lbnRNZXRob2QoXG4gICAgdHlwZTogcGF5bWVudE1ldGhvZC5wYXltZW50TWV0aG9kVHlwZSxcbiAgICBlbGVtZW50OiBlbGVtZW50cy5FbGVtZW50LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVQYXltZW50TWV0aG9kT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxQYXltZW50TWV0aG9kUmVzcG9uc2U+O1xuICBjcmVhdGVQYXltZW50TWV0aG9kKFxuICAgICAgZGF0YTogUGF5bWVudE1ldGhvZERhdGFcbiAgKTogUHJvbWlzZTxQYXltZW50TWV0aG9kUmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmlwZUluc3RhbmNlT3B0aW9uc3tcbiAgc3RyaXBlQWNjb3VudCA/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZCB7XG4gIGlkICAgICAgICAgICAgICAgICAgOiBzdHJpbmdcbiAgb2JqZWN0ICAgICAgICAgICAgICA6IFwiY2FyZFwifHN0cmluZ1xuICBuYW1lICAgICAgICAgICAgICAgIDogc3RyaW5nXG4gIGFkZHJlc3NfY2l0eSAgICAgICAgOiBzdHJpbmdcbiAgYWRkcmVzc19jb3VudHJ5ICAgICA6IHN0cmluZ1xuICBhZGRyZXNzX2xpbmUxICAgICAgIDogc3RyaW5nXG4gIGFkZHJlc3NfbGluZTFfY2hlY2sgOiBzdHJpbmdcbiAgYWRkcmVzc19saW5lMiAgICAgICA6IHN0cmluZ1xuICBhZGRyZXNzX3N0YXRlICAgICAgIDogc3RyaW5nXG4gIGFkZHJlc3NfemlwICAgICAgICAgOiBzdHJpbmdcbiAgYWRkcmVzc196aXBfY2hlY2sgICA6IHN0cmluZ1xuICBicmFuZCAgICAgICAgICAgICAgIDogc3RyaW5nXG4gIGNvdW50cnkgICAgICAgICAgICAgOiBzdHJpbmdcbiAgY3ZjX2NoZWNrICAgICAgICAgICA6IHN0cmluZ1xuICBkeW5hbWljX2xhc3Q0ICAgICAgIDogc3RyaW5nXG4gIGV4cF9tb250aCAgICAgICAgICAgOiBudW1iZXJcbiAgZXhwX3llYXIgICAgICAgICAgICA6IG51bWJlclxuICBmdW5kaW5nICAgICAgICAgICAgIDogc3RyaW5nXG4gIGxhc3Q0ICAgICAgICAgICAgICAgOiBzdHJpbmdcbiAgbWV0YWRhdGEgICAgICAgICAgICA6IE1ldGFkYXRhXG4gIHRva2VuaXphdGlvbl9tZXRob2QgOiBhbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVTdHlsZXtcbiAgY29sb3IgICAgICAgICAgOiBzdHJpbmdcbiAgZm9udEZhbWlseSAgICAgOiBzdHJpbmdcbiAgZm9udFNpemUgICAgICAgOiBzdHJpbmdcbiAgZm9udFNtb290aGluZyAgOiBzdHJpbmdcbiAgZm9udFN0eWxlICAgICAgOiBzdHJpbmdcbiAgZm9udFZhcmlhbnQgICAgOiBzdHJpbmdcbiAgaWNvbkNvbG9yICAgICAgOiBzdHJpbmdcbiAgbGluZUhlaWdodCAgICAgOiBzdHJpbmdcbiAgbGV0dGVyU3BhY2luZyAgOiBzdHJpbmdcbiAgdGV4dEFsaWduICAgICAgOiBzdHJpbmdcbiAgdGV4dERlY29yYXRpb24gOiBzdHJpbmdcbiAgdGV4dFNoYWRvdyAgICAgOiBzdHJpbmdcbiAgdGV4dFRyYW5zZm9ybSAgOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVTdHlsaW5ne1xuICBiYXNlICAgICA6IFN0cmlwZVN0eWxlXG4gIGNvbXBsZXRlIDogU3RyaXBlU3R5bGVcbiAgZW1wdHkgICAgOiBTdHJpcGVTdHlsZVxuICBpbnZhbGlkICA6IFN0cmlwZVN0eWxlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2xhc3Nlc3tcbiAgYmFzZSAgICAgOiBzdHJpbmdcbiAgY29tcGxldGUgOiBzdHJpbmdcbiAgZW1wdHkgICAgOiBzdHJpbmdcbiAgZm9jdXMgICAgOiBzdHJpbmdcbiAgaW52YWxpZCAgOiBzdHJpbmdcbiAgd2Via2l0QXV0b2ZpbGw6c3RyaW5nXG59XG5cbnR5cGUgZWxlbWVudHNUeXBlID0gJ2NhcmQnIHwgJ2NhcmROdW1iZXInIHwgJ2NhcmRFeHBpcnknIHwgJ2NhcmRDdmMnIHwgJ3Bvc3RhbENvZGUnIHwgJ3BheW1lbnRSZXF1ZXN0QnV0dG9uJyB8ICdpYmFuJyB8ICdpZGVhbEJhbmsnO1xuXG5pbnRlcmZhY2UgRWxlbWVudHMge1xuICBjcmVhdGUodHlwZTogZWxlbWVudHNUeXBlLCBvcHRpb25zPzogRWxlbWVudHNPcHRpb25zKTogRWxlbWVudDtcbiAgZ2V0RWxlbWVudCh0eXBlOiBlbGVtZW50c1R5cGUpOiBFbGVtZW50IHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50c09wdGlvbnMge1xuICBjbGFzc2VzPzoge1xuICAgICAgYmFzZT86IHN0cmluZztcbiAgICAgIGNvbXBsZXRlPzogc3RyaW5nO1xuICAgICAgZW1wdHk/OiBzdHJpbmc7XG4gICAgICBmb2N1cz86IHN0cmluZztcbiAgICAgIGludmFsaWQ/OiBzdHJpbmc7XG4gICAgICB3ZWJraXRBdXRvZmlsbD86IHN0cmluZztcbiAgfTtcbiAgaGlkZVBvc3RhbENvZGU/OiBib29sZWFuO1xuICBoaWRlSWNvbj86IGJvb2xlYW47XG4gIHNob3dJY29uPzogYm9vbGVhbjtcbiAgaWNvblN0eWxlPzogJ3NvbGlkJyB8ICdkZWZhdWx0JztcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIHBsYWNlaG9sZGVyQ291bnRyeT86IHN0cmluZztcbiAgc3R5bGU/OiB7XG4gICAgICBiYXNlPzogU3R5bGU7XG4gICAgICBjb21wbGV0ZT86IFN0eWxlO1xuICAgICAgZW1wdHk/OiBTdHlsZTtcbiAgICAgIGludmFsaWQ/OiBTdHlsZTtcbiAgICAgIHBheW1lbnRSZXF1ZXN0QnV0dG9uPzogUGF5bWVudFJlcXVlc3RCdXR0b25TdHlsZU9wdGlvbnM7XG4gIH07XG4gIHZhbHVlPzogc3RyaW5nIHwgeyBbb2JqZWN0S2V5OiBzdHJpbmddOiBzdHJpbmc7IH07XG5cbiAgLy8gVE9ETzogQWRkIHRoaXMgYmFjayBhdCBsYXRlciBkYXRlIChhdm9pZGVkIGR1ZSB0byB0aGlzIHBhY2thZ2UgZG9lc24ndCBjb3ZlciB0cmFuc2FjdGlvbnMgeWV0KVxuICAvLyBwYXltZW50UmVxdWVzdD86IHBheW1lbnRSZXF1ZXN0LlN0cmlwZVBheW1lbnRSZXF1ZXN0O1xuXG4gIHN1cHBvcnRlZENvdW50cmllcz86IHN0cmluZ1tdO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTdHlsZSBleHRlbmRzIFN0eWxlT3B0aW9ucyB7XG4gICc6aG92ZXInPzogU3R5bGVPcHRpb25zO1xuICAnOmZvY3VzJz86IFN0eWxlT3B0aW9ucztcbiAgJzo6cGxhY2Vob2xkZXInPzogU3R5bGVPcHRpb25zO1xuICAnOjpzZWxlY3Rpb24nPzogU3R5bGVPcHRpb25zO1xuICAnOi13ZWJraXQtYXV0b2ZpbGwnPzogU3R5bGVPcHRpb25zO1xuICAnOmRpc2FibGVkJz86IFN0eWxlT3B0aW9ucztcbiAgJzo6LW1zLWNsZWFyJz86IFN0eWxlT3B0aW9ucztcbn1cblxuaW50ZXJmYWNlIFN0eWxlT3B0aW9ucyB7XG4gIGNvbG9yPzogc3RyaW5nO1xuICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gIGZvbnRTaXplPzogc3RyaW5nO1xuICBmb250U21vb3RoaW5nPzogc3RyaW5nO1xuICBmb250U3R5bGU/OiBzdHJpbmc7XG4gIGZvbnRWYXJpYW50Pzogc3RyaW5nO1xuICBmb250V2VpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyO1xuICBpY29uQ29sb3I/OiBzdHJpbmc7XG4gIGxpbmVIZWlnaHQ/OiBzdHJpbmc7XG4gIGxldHRlclNwYWNpbmc/OiBzdHJpbmc7XG4gIHRleHRBbGlnbj86IHN0cmluZztcbiAgdGV4dERlY29yYXRpb24/OiBzdHJpbmc7XG4gIHRleHRTaGFkb3c/OiBzdHJpbmc7XG4gIHRleHRUcmFuc2Zvcm0/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBQYXltZW50UmVxdWVzdEJ1dHRvblN0eWxlT3B0aW9ucyB7XG4gIHR5cGU/OiAnZGVmYXVsdCcgfCAnZG9uYXRlJyB8ICdidXknO1xuICB0aGVtZTogJ2RhcmsnIHwgJ2xpZ2h0JyB8ICdsaWdodC1vdXRsaW5lJztcbiAgaGVpZ2h0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFua0FjY291bnRUb2tlbk9wdGlvbnMge1xuICAvKipcbiAgICogVHdvIGNoYXJhY3RlciBjb3VudHJ5IGNvZGUgKGUuZy4sIFVTKS5cbiAgICovXG4gIGNvdW50cnk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRocmVlIGNoYXJhY3RlciBjdXJyZW5jeSBjb2RlIChlLmcuLCB1c2QpLlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBiYW5rIHJvdXRpbmcgbnVtYmVyIChlLmcuLCAxMTEwMDAwMjUpLiBPcHRpb25hbCBpZiB0aGUgY3VycmVuY3kgaXMgZXVyLCBhcyB0aGUgYWNjb3VudCBudW1iZXIgaXMgYW4gSUJBTi5cbiAgICovXG4gIHJvdXRpbmdfbnVtYmVyPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGJhbmsgYWNjb3VudCBudW1iZXIgKGUuZy4sIDAwMDEyMzQ1Njc4OSkuXG4gICAqL1xuICBhY2NvdW50X251bWJlcjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFjY291bnQgaG9sZGVyLlxuICAgKi9cbiAgYWNjb3VudF9ob2xkZXJfbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgZW50aXR5IHRoYXQgaG9sZHMgdGhlIGFjY291bnQuIENhbiBiZSBlaXRoZXIgaW5kaXZpZHVhbCBvciBjb21wYW55LlxuICAgKi9cbiAgYWNjb3VudF9ob2xkZXJfdHlwZTogJ2luZGl2aWR1YWwnIHwgJ2NvbXBhbnknO1xuXG4gIG1ldGFkYXRhPzogTWV0YWRhdGFcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTb3VyY2VPcHRpb25zIHtcbiAgdHlwZTogJ2FjaF9jcmVkaXRfdHJhbnNmZXInIHwgJ2FjaF9kZWJpdCcgfCAnYWxpcGF5JyB8ICdiYW5jb250YWN0JyB8ICdjYXJkJyB8ICdjYXJkX3ByZXNlbnQnIHwgJ2VwcycgfCAnZ2lyb3BheScgfCAnaWRlYWwnIHwgJ211bHRpYmFuY28nIHwgJ2tsYXJuYScgfCAncDI0JyB8ICdzZXBhX2RlYml0JyB8ICdzb2ZvcnQnIHwgJ3RocmVlX2Rfc2VjdXJlJyB8ICd3ZWNoYXQnIHwgc3RyaW5nO1xuXG4gIGZsb3c/OiAncmVkaXJlY3QnIHwgJ3JlY2VpdmVyJyB8ICdjb2RlX3ZlcmlmaWNhdGlvbicgfCAnbm9uZSc7XG4gIHNlcGFfZGViaXQ/OiB7XG4gICAgICBpYmFuOiBzdHJpbmc7XG4gIH07XG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xuICBhbW91bnQ/OiBudW1iZXI7XG4gIG93bmVyPzogT3duZXJJbmZvO1xuICBtYW5kYXRlPzogU291cmNlTWFuZGF0ZTtcbiAgbWV0YWRhdGE/OiBNZXRhZGF0YTtcbiAgc3RhdGVtZW50X2Rlc2NyaXB0b3I/OiBzdHJpbmc7XG4gIHJlZGlyZWN0Pzoge1xuICAgICAgcmV0dXJuX3VybDogc3RyaW5nO1xuICB9O1xuICB0b2tlbj86IHN0cmluZztcbiAgdXNhZ2U/OiAncmV1c2FibGUnIHwgJ3NpbmdsZV91c2UnO1xuICB0aHJlZV9kX3NlY3VyZT86IHtcbiAgICAgIGNhcmQ6IHN0cmluZztcbiAgfTtcbiAgc29mb3J0Pzoge1xuICAgICAgY291bnRyeTogc3RyaW5nO1xuICAgICAgcHJlZmVycmVkX2xhbmd1YWdlPzogJ2RlJyB8ICdlbicgfCAnZXMnIHwgJ2l0JyB8ICdmcicgfCAnbmwnIHwgJ3BsJztcbiAgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgT3duZXJJbmZvIHtcbiAgYWRkcmVzcz86IE93bmVyQWRkcmVzcztcbiAgbmFtZT86IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG4gIHBob25lPzogc3RyaW5nO1xufVxuaW50ZXJmYWNlIE93bmVyQWRkcmVzcyB7XG4gIGNpdHk/OiBzdHJpbmc7XG4gIGNvdW50cnk/OiBzdHJpbmc7XG4gIGxpbmUxPzogc3RyaW5nO1xuICBsaW5lMj86IHN0cmluZztcbiAgcG9zdGFsX2NvZGU/OiBzdHJpbmc7XG4gIHN0YXRlPzogc3RyaW5nO1xufVxuaW50ZXJmYWNlIFBpaVRva2VuT3B0aW9ucyB7XG4gIHBlcnNvbmFsX2lkX251bWJlcjogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBUb2tlblJlc3BvbnNlIHtcbiAgdG9rZW4/OiBUb2tlbjtcbiAgZXJyb3I/OiBFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb2tlbiB7XG4gIGlkOiBzdHJpbmc7XG4gIG9iamVjdDogc3RyaW5nO1xuICBiYW5rX2FjY291bnQ/OiBCYW5rQWNjb3VudDtcbiAgY2FyZD86IENhcmQ7XG4gIGNsaWVudF9pcDogc3RyaW5nO1xuICBjcmVhdGVkOiBudW1iZXI7XG4gIGxpdmVtb2RlOiBib29sZWFuO1xuICB0eXBlOiBzdHJpbmc7XG4gIHVzZWQ6IGJvb2xlYW47XG59XG5cbi8vIExFR0FDWTogU3VwcG9ydCBvbGQgbmFtaW5nIGNvbnZlbnRpb25cbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlVG9rZW4gZXh0ZW5kcyBUb2tlbiB7fVxuXG50eXBlIHN0YXR1c1R5cGUgPSAnbmV3JyB8ICd2YWxpZGF0ZWQnIHwgJ3ZlcmlmaWVkJyB8ICd2ZXJpZmljYXRpb25fZmFpbGVkJyB8ICdlcnJvcmVkJztcbmludGVyZmFjZSBCYW5rQWNjb3VudCB7XG4gIGlkOiBzdHJpbmc7XG4gIG9iamVjdDogc3RyaW5nO1xuICBhY2NvdW50X2hvbGRlcl9uYW1lOiBzdHJpbmc7XG4gIGFjY291bnRfaG9sZGVyX3R5cGU6IHN0cmluZztcbiAgYmFua19uYW1lOiBzdHJpbmc7XG4gIGNvdW50cnk6IHN0cmluZztcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgZmluZ2VycHJpbnQ6IHN0cmluZztcbiAgbGFzdDQ6IHN0cmluZztcbiAgcm91dGluZ19udW1iZXI6IHN0cmluZztcbiAgc3RhdHVzOiBzdGF0dXNUeXBlO1xufVxuXG50eXBlIGJyYW5kVHlwZSA9ICdWaXNhJyB8ICdBbWVyaWNhbiBFeHByZXNzJyB8ICdNYXN0ZXJDYXJkJyB8ICdEaXNjb3ZlcicgfCAnSkNCJyB8ICdEaW5lcnMgQ2x1YicgfCAnVW5rbm93bic7XG50eXBlIGNoZWNrVHlwZSA9ICdwYXNzJyB8ICdmYWlsJyB8ICd1bmF2YWlsYWJsZScgfCAndW5jaGVja2VkJztcbnR5cGUgZnVuZGluZ1R5cGUgPSAnY3JlZGl0JyB8ICdkZWJpdCcgfCAncHJlcGFpZCcgfCAndW5rbm93bic7XG50eXBlIHRva2VuaXphdGlvblR5cGUgPSAnYXBwbGVfcGF5JyB8ICdhbmRyb2lkX3BheSc7XG5pbnRlcmZhY2UgQ2FyZCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBvYmplY3Q6IHN0cmluZztcbiAgICBhZGRyZXNzX2NpdHk/OiBzdHJpbmc7XG4gICAgYWRkcmVzc19jb3VudHJ5Pzogc3RyaW5nO1xuICAgIGFkZHJlc3NfbGluZTE/OiBzdHJpbmc7XG4gICAgYWRkcmVzc19saW5lMV9jaGVjaz86IGNoZWNrVHlwZTtcbiAgICBhZGRyZXNzX2xpbmUyPzogc3RyaW5nO1xuICAgIGFkZHJlc3Nfc3RhdGU/OiBzdHJpbmc7XG4gICAgYWRkcmVzc196aXA/OiBzdHJpbmc7XG4gICAgYWRkcmVzc196aXBfY2hlY2s/OiBjaGVja1R5cGU7XG4gICAgYnJhbmQ6IGJyYW5kVHlwZTtcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgY3VycmVuY3k/OiBzdHJpbmc7XG4gICAgY3ZjX2NoZWNrPzogY2hlY2tUeXBlO1xuICAgIGR5bmFtaWNfbGFzdDQ6IHN0cmluZztcbiAgICBleHBfbW9udGg6IG51bWJlcjtcbiAgICBleHBfeWVhcjogbnVtYmVyO1xuICAgIGZpbmdlcnByaW50OiBzdHJpbmc7XG4gICAgZnVuZGluZzogZnVuZGluZ1R5cGU7XG4gICAgbGFzdDQ6IHN0cmluZztcbiAgICBtZXRhZGF0YTogTWV0YWRhdGE7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICB0b2tlbml6YXRpb25fbWV0aG9kPzogdG9rZW5pemF0aW9uVHlwZTtcbiAgICB0aHJlZV9kX3NlY3VyZT86ICdyZXF1aXJlZCcgfCAncmVjb21tZW5kZWQnIHwgJ29wdGlvbmFsJyB8ICdub3Rfc3VwcG9ydGVkJztcbn1cblxuaW50ZXJmYWNlIFRva2VuT3B0aW9ucyB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGFkZHJlc3NfbGluZTE/OiBzdHJpbmc7XG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XG4gIGFkZHJlc3NfY2l0eT86IHN0cmluZztcbiAgYWRkcmVzc19zdGF0ZT86IHN0cmluZztcbiAgYWRkcmVzc196aXA/OiBzdHJpbmc7XG4gIGFkZHJlc3NfY291bnRyeT86IHN0cmluZztcbiAgY3VycmVuY3k/OiBzdHJpbmc7XG59XG5pbnRlcmZhY2UgUmV0cmlldmVTb3VyY2VPcHRpb25zIHtcbiAgaWQ6IHN0cmluZztcbiAgY2xpZW50X3NlY3JldDogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBTb3VyY2VSZXNwb25zZSB7XG4gIHNvdXJjZT86IFNvdXJjZTtcbiAgZXJyb3I/OiBFcnJvcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlIHtcbiAgY2xpZW50X3NlY3JldDogc3RyaW5nO1xuICBjcmVhdGVkOiBudW1iZXI7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIGlkOiBzdHJpbmc7XG4gIG93bmVyOiB7XG4gICAgICBhZGRyZXNzOiBPd25lckFkZHJlc3MgfCBudWxsO1xuICAgICAgZW1haWw6IHN0cmluZyB8IG51bGw7XG4gICAgICBuYW1lOiBzdHJpbmcgfCBudWxsO1xuICAgICAgcGhvbmU6IHN0cmluZyB8IG51bGw7XG4gICAgICB2ZXJpZmllZF9hZGRyZXNzOiBzdHJpbmcgfCBudWxsO1xuICAgICAgdmVyaWZpZWRfZW1haWw6IHN0cmluZyB8IG51bGw7XG4gICAgICB2ZXJpZmllZF9uYW1lOiBzdHJpbmcgfCBudWxsO1xuICAgICAgdmVyaWZpZWRfcGhvbmU6IHN0cmluZyB8IG51bGw7XG4gIH07XG4gIHNlcGFfZGViaXQ/OiB7XG4gICAgICBiYW5rX2NvZGU6IHN0cmluZyB8IG51bGw7XG4gICAgICBjb3VudHJ5OiBzdHJpbmcgfCBudWxsO1xuICAgICAgZmluZ2VycHJpbnQ6IHN0cmluZztcbiAgICAgIGxhc3Q0OiBzdHJpbmc7XG4gICAgICBtYW5kYXRlX3JlZmVyZW5jZTogc3RyaW5nO1xuICB9O1xuICBjYXJkPzogQ2FyZDtcbiAgc3RhdHVzPzogc3RyaW5nO1xuICByZWRpcmVjdD86IHtcbiAgICAgIHN0YXR1czogc3RyaW5nO1xuICAgICAgdXJsOiBzdHJpbmc7XG4gIH07XG4gIHRocmVlX2Rfc2VjdXJlPzoge1xuICAgICAgYXV0aGVudGljYXRlZDogYm9vbGVhbjtcbiAgfTtcbn1cbm5hbWVzcGFjZSBlbGVtZW50cyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudHNDcmVhdGVPcHRpb25zIHtcbiAgICAgIGZvbnRzPzogRm9udFtdO1xuICAgICAgbG9jYWxlPzogc3RyaW5nO1xuICB9XG5cbiAgdHlwZSBoYW5kbGVyID0gKHJlc3BvbnNlPzogRWxlbWVudENoYW5nZVJlc3BvbnNlKSA9PiB2b2lkO1xuICB0eXBlIGV2ZW50VHlwZXMgPSAnYmx1cicgfCAnY2hhbmdlJyB8ICdmb2N1cycgfCAncmVhZHknO1xuICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQge1xuICAgICAgLy8gSFRNTEVsZW1lbnQga2VlcHMgZ2l2aW5nIHRoaXMgZXJyb3IgZm9yIHNvbWUgcmVhc29uOlxuICAgICAgLy8gQ2Fubm90IGZpbmQgbmFtZSAnSFRNTEVsZW1lbnQnXG4gICAgICBtb3VudChkb21FbGVtZW50OiBhbnkpOiB2b2lkO1xuICAgICAgb24oZXZlbnQ6IGV2ZW50VHlwZXMsIGhhbmRsZXI6IGhhbmRsZXIpOiB2b2lkO1xuICAgICAgb24oZXZlbnQ6ICdjbGljaycsIGhhbmRsZXI6IChyZXNwb25zZTogeyBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdm9pZCB9KSA9PiB2b2lkKTogdm9pZDtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnQ6IGV2ZW50VHlwZXMsIGhhbmRsZXI6IGhhbmRsZXIpOiB2b2lkO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihldmVudDogJ2NsaWNrJywgaGFuZGxlcjogKHJlc3BvbnNlOiB7IHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkIH0pID0+IHZvaWQpOiB2b2lkO1xuICAgICAgZm9jdXMoKTogdm9pZDtcbiAgICAgIGJsdXIoKTogdm9pZDtcbiAgICAgIGNsZWFyKCk6IHZvaWQ7XG4gICAgICB1bm1vdW50KCk6IHZvaWQ7XG4gICAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgICB1cGRhdGUob3B0aW9uczogRWxlbWVudHNPcHRpb25zKTogdm9pZDtcbiAgfVxuXG4gIGludGVyZmFjZSBFbGVtZW50Q2hhbmdlUmVzcG9uc2Uge1xuICAgICAgZWxlbWVudFR5cGU6IHN0cmluZztcbiAgICAgIGJyYW5kOiBzdHJpbmc7XG4gICAgICBjb21wbGV0ZTogYm9vbGVhbjtcbiAgICAgIGVtcHR5OiBib29sZWFuO1xuICAgICAgdmFsdWU/OiB7IHBvc3RhbENvZGU6IHN0cmluZyB8IG51bWJlciB9IHwgc3RyaW5nO1xuICAgICAgY291bnRyeT86IHN0cmluZztcbiAgICAgIGJhbmtOYW1lPzogc3RyaW5nO1xuICAgICAgZXJyb3I/OiBFcnJvcjtcbiAgfVxuXG4gIGludGVyZmFjZSBFbGVtZW50T3B0aW9ucyB7XG4gICAgICBmb250cz86IEZvbnRbXTtcbiAgICAgIGxvY2FsZT86IHN0cmluZztcbiAgfVxuXG4gIHR5cGUgZWxlbWVudHNUeXBlID0gJ2NhcmQnIHwgJ2NhcmROdW1iZXInIHwgJ2NhcmRFeHBpcnknIHwgJ2NhcmRDdmMnIHwgJ3Bvc3RhbENvZGUnIHwgJ3BheW1lbnRSZXF1ZXN0QnV0dG9uJyB8ICdpYmFuJyB8ICdpZGVhbEJhbmsnO1xuICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRzIHtcbiAgICAgIGNyZWF0ZSh0eXBlOiBlbGVtZW50c1R5cGUsIG9wdGlvbnM/OiBFbGVtZW50c09wdGlvbnMpOiBFbGVtZW50O1xuICAgICAgZ2V0RWxlbWVudCh0eXBlOiBlbGVtZW50c1R5cGUpOiBFbGVtZW50IHwgbnVsbDtcbiAgfVxuXG4gIGludGVyZmFjZSBFbGVtZW50c09wdGlvbnMge1xuICAgICAgY2xhc3Nlcz86IHtcbiAgICAgICAgICBiYXNlPzogc3RyaW5nO1xuICAgICAgICAgIGNvbXBsZXRlPzogc3RyaW5nO1xuICAgICAgICAgIGVtcHR5Pzogc3RyaW5nO1xuICAgICAgICAgIGZvY3VzPzogc3RyaW5nO1xuICAgICAgICAgIGludmFsaWQ/OiBzdHJpbmc7XG4gICAgICAgICAgd2Via2l0QXV0b2ZpbGw/OiBzdHJpbmc7XG4gICAgICB9O1xuICAgICAgaGlkZVBvc3RhbENvZGU/OiBib29sZWFuO1xuICAgICAgaGlkZUljb24/OiBib29sZWFuO1xuICAgICAgc2hvd0ljb24/OiBib29sZWFuO1xuICAgICAgaWNvblN0eWxlPzogJ3NvbGlkJyB8ICdkZWZhdWx0JztcbiAgICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgICAgcGxhY2Vob2xkZXJDb3VudHJ5Pzogc3RyaW5nO1xuICAgICAgc3R5bGU/OiB7XG4gICAgICAgICAgYmFzZT86IFN0eWxlO1xuICAgICAgICAgIGNvbXBsZXRlPzogU3R5bGU7XG4gICAgICAgICAgZW1wdHk/OiBTdHlsZTtcbiAgICAgICAgICBpbnZhbGlkPzogU3R5bGU7XG4gICAgICAgICAgcGF5bWVudFJlcXVlc3RCdXR0b24/OiBQYXltZW50UmVxdWVzdEJ1dHRvblN0eWxlT3B0aW9ucztcbiAgICAgIH07XG4gICAgICB2YWx1ZT86IHN0cmluZyB8IHsgW29iamVjdEtleTogc3RyaW5nXTogc3RyaW5nOyB9O1xuXG4gICAgICAvLyBUT0RPOiBIb2xkaW5nIG9mZiBvbiB0aGlzXG4gICAgICAvLyBwYXltZW50UmVxdWVzdD86IHBheW1lbnRSZXF1ZXN0LlN0cmlwZVBheW1lbnRSZXF1ZXN0O1xuXG4gICAgICBzdXBwb3J0ZWRDb3VudHJpZXM/OiBzdHJpbmdbXTtcbiAgICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgfVxuXG4gIGludGVyZmFjZSBTdHlsZSBleHRlbmRzIFN0eWxlT3B0aW9ucyB7XG4gICAgICAnOmhvdmVyJz86IFN0eWxlT3B0aW9ucztcbiAgICAgICc6Zm9jdXMnPzogU3R5bGVPcHRpb25zO1xuICAgICAgJzo6cGxhY2Vob2xkZXInPzogU3R5bGVPcHRpb25zO1xuICAgICAgJzo6c2VsZWN0aW9uJz86IFN0eWxlT3B0aW9ucztcbiAgICAgICc6LXdlYmtpdC1hdXRvZmlsbCc/OiBTdHlsZU9wdGlvbnM7XG4gICAgICAnOmRpc2FibGVkJz86IFN0eWxlT3B0aW9ucztcbiAgICAgICc6Oi1tcy1jbGVhcic/OiBTdHlsZU9wdGlvbnM7XG4gIH1cblxuICBpbnRlcmZhY2UgRm9udCB7XG4gICAgICBmYW1pbHk/OiBzdHJpbmc7XG4gICAgICBzcmM/OiBzdHJpbmc7XG4gICAgICBkaXNwbGF5Pzogc3RyaW5nO1xuICAgICAgc3R5bGU/OiBzdHJpbmc7XG4gICAgICB1bmljb2RlUmFuZ2U/OiBzdHJpbmc7XG4gICAgICB3ZWlnaHQ/OiBzdHJpbmc7XG4gICAgICBjc3NTcmM/OiBzdHJpbmc7XG4gIH1cblxuICBpbnRlcmZhY2UgU3R5bGVPcHRpb25zIHtcbiAgICAgIGNvbG9yPzogc3RyaW5nO1xuICAgICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgICAgZm9udEZhbWlseT86IHN0cmluZztcbiAgICAgIGZvbnRTaXplPzogc3RyaW5nO1xuICAgICAgZm9udFNtb290aGluZz86IHN0cmluZztcbiAgICAgIGZvbnRTdHlsZT86IHN0cmluZztcbiAgICAgIGZvbnRWYXJpYW50Pzogc3RyaW5nO1xuICAgICAgZm9udFdlaWdodD86IHN0cmluZyB8IG51bWJlcjtcbiAgICAgIGljb25Db2xvcj86IHN0cmluZztcbiAgICAgIGxpbmVIZWlnaHQ/OiBzdHJpbmc7XG4gICAgICBsZXR0ZXJTcGFjaW5nPzogc3RyaW5nO1xuICAgICAgdGV4dEFsaWduPzogc3RyaW5nO1xuICAgICAgdGV4dERlY29yYXRpb24/OiBzdHJpbmc7XG4gICAgICB0ZXh0U2hhZG93Pzogc3RyaW5nO1xuICAgICAgdGV4dFRyYW5zZm9ybT86IHN0cmluZztcbiAgfVxuXG4gIGludGVyZmFjZSBQYXltZW50UmVxdWVzdEJ1dHRvblN0eWxlT3B0aW9ucyB7XG4gICAgICB0eXBlPzogJ2RlZmF1bHQnIHwgJ2RvbmF0ZScgfCAnYnV5JztcbiAgICAgIHRoZW1lOiAnZGFyaycgfCAnbGlnaHQnIHwgJ2xpZ2h0LW91dGxpbmUnO1xuICAgICAgaGVpZ2h0OiBzdHJpbmc7XG4gIH1cbn1cblxuaW50ZXJmYWNlIE9mZmxpbmVBY2NlcHRhbmNlTWFuZGF0ZSB7XG4gIGNvbnRhY3RfZW1haWw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIE9ubGluZUFjY2VwdGFuY2VNYW5kYXRlIHtcbiAgZGF0ZTogbnVtYmVyO1xuICBpcDogc3RyaW5nO1xuICB1c2VyX2FnZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBTb3VyY2VNYW5kYXRlQWNjZXB0YW5jZSB7XG4gIGRhdGU6IG51bWJlcjtcbiAgc3RhdHVzOiAnYWNjZXB0ZWQnIHwgJ3JlZnVzZWQnO1xuICBpcD86IHN0cmluZztcbiAgb2ZmbGluZT86IE9mZmxpbmVBY2NlcHRhbmNlTWFuZGF0ZTtcbiAgb25saW5lPzogT25saW5lQWNjZXB0YW5jZU1hbmRhdGU7XG4gIHR5cGU/OiAnb25saW5lJ3wgJ29mZmxpbmUnO1xuICB1c2VyX2FnZW50Pzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU291cmNlTWFuZGF0ZSB7XG4gIGFjY2VwdGFuY2U/OiBTb3VyY2VNYW5kYXRlQWNjZXB0YW5jZTtcbiAgYW1vdW50PzogbnVtYmVyO1xuICBjdXJyZW5jeT86IHN0cmluZztcbiAgaW50ZXJ2YWw/OiAnb25lX3RpbWUnIHwgJ3NjaGVkdWxlZCcgfCAndmFyaWFibGUnO1xuICBub3RpZmljYXRpb25fbWV0aG9kPzogJ2VtYWlsJyB8ICdtYW51YWwnIHwgJ25vbmUnO1xufVxuXG5uYW1lc3BhY2UgcGF5bWVudE1ldGhvZCB7XG4gIGV4cG9ydCB0eXBlIHBheW1lbnRNZXRob2RUeXBlID0gJ2NhcmQnIHwgJ2NhcmRfcHJlc2VudCc7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQYXltZW50TWV0aG9kIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgb2JqZWN0XG4gICAgICAgKi9cbiAgICAgIGlkOiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVmFsdWUgaXMgXCJwYXltZW50X21ldGhvZFwiXG4gICAgICAgKi9cbiAgICAgIG9iamVjdDogJ3BheW1lbnRfbWV0aG9kJztcblxuICAgICAgLyoqXG4gICAgICAgKiBCaWxsaW5nIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgUGF5bWVudE1ldGhvZCB0aGF0IG1heSBiZVxuICAgICAgICogdXNlZCBvciByZXF1aXJlZCBieSBwYXJ0aWN1bGFyIHR5cGVzIG9mIHBheW1lbnQgbWV0aG9kcy5cbiAgICAgICAqL1xuICAgICAgYmlsbGluZ19kZXRhaWxzOiBCaWxsaW5nRGV0YWlscztcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGlzIGlzIGEgY2FyZCBQYXltZW50TWV0aG9kLCB0aGlzIGhhc2ggY29udGFpbnMgZGV0YWlscyBhYm91dCB0aGUgY2FyZC5cbiAgICAgICAqL1xuICAgICAgY2FyZD86IFBheW1lbnRNZXRob2RDYXJkO1xuXG4gICAgICAvKipcbiAgICAgICAqIElmIHRoaXMgaXMgYW4gY2FyZF9wcmVzZW50IFBheW1lbnRNZXRob2QsIHRoaXMgaGFzaCBjb250YWlucyBkZXRhaWxzXG4gICAgICAgKiBhYm91dCB0aGUgQ2FyZCBQcmVzZW50IHBheW1lbnQgbWV0aG9kLlxuICAgICAgICovXG4gICAgICBjYXJkX3ByZXNlbnQ/OiBhbnk7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGltZSBhdCB3aGljaCB0aGUgb2JqZWN0IHdhcyBjcmVhdGVkLiBNZWFzdXJlZCBpbiBzZWNvbmRzIHNpbmNlIHRoZVxuICAgICAgICogVW5peCBlcG9jaC5cbiAgICAgICAqL1xuICAgICAgY3JlYXRlZDogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBJRCBvZiB0aGUgQ3VzdG9tZXIgdG8gd2hpY2ggdGhpcyBQYXltZW50TWV0aG9kIGlzIHNhdmVkLlxuICAgICAgICogVGhpcyB3aWxsIG5vdCBiZSBzZXQgd2hlbiB0aGUgUGF5bWVudE1ldGhvZCBoYXMgbm90IGJlZW4gc2F2ZWQgdG8gYSBDdXN0b21lci5cbiAgICAgICAqL1xuICAgICAgY3VzdG9tZXI6IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogSGFzIHRoZSB2YWx1ZSB0cnVlIGlmIHRoZSBvYmplY3QgZXhpc3RzIGluIGxpdmUgbW9kZSBvciB0aGUgdmFsdWVcbiAgICAgICAqIGZhbHNlIGlmIHRoZSBvYmplY3QgZXhpc3RzIGluIHRlc3QgbW9kZS5cbiAgICAgICAqL1xuICAgICAgbGl2ZW1vZGU6IGJvb2xlYW47XG5cbiAgICAgIG1ldGFkYXRhOiBNZXRhZGF0YTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgUGF5bWVudE1ldGhvZC4gQW4gYWRkaXRpb25hbCBoYXNoIGlzIGluY2x1ZGVkIG9uIHRoZVxuICAgICAgICogUGF5bWVudE1ldGhvZCB3aXRoIGEgbmFtZSBtYXRjaGluZyB0aGlzIHZhbHVlLiBJdCBjb250YWlucyBhZGRpdGlvbmFsXG4gICAgICAgKiBpbmZvcm1hdGlvbiBzcGVjaWZpYyB0byB0aGUgUGF5bWVudE1ldGhvZCB0eXBlLlxuICAgICAgICovXG4gICAgICB0eXBlOiBzdHJpbmc7XG4gIH1cblxuICB0eXBlIHBheW1lbnRNZXRob2RDYXJkQnJhbmQgPSAnYW1leCdcbiAgICAgIHwgJ2RpbmVycydcbiAgICAgIHwgJ2Rpc2NvdmVyJ1xuICAgICAgfCAnamNiJ1xuICAgICAgfCAnbWFzdGVyY2FyZCdcbiAgICAgIHwgJ3VuaW9ucGF5J1xuICAgICAgfCAndmlzYSdcbiAgICAgIHwgJ3Vua25vd24nO1xuXG4gIGludGVyZmFjZSBQYXltZW50TWV0aG9kQ2FyZCB7XG4gICAgICAvKipcbiAgICAgICAqIENhcmQgYnJhbmRcbiAgICAgICAqL1xuICAgICAgYnJhbmQ6IHBheW1lbnRNZXRob2RDYXJkQnJhbmQ7XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tzIG9uIENhcmQgYWRkcmVzcyBhbmQgQ1ZDIGlmIHByb3ZpZGVkLlxuICAgICAgICovXG4gICAgICBjaGVja3M6IHtcbiAgICAgICAgICBhZGRyZXNzX2xpbmUxX2NoZWNrOiBib29sZWFuIHwgbnVsbDtcbiAgICAgICAgICBhZGRyZXNzX3Bvc3RhbF9jb2RlX2NoZWNrOiBib29sZWFuIHwgbnVsbDtcbiAgICAgICAgICBjdmNfY2hlY2s6IGJvb2xlYW4gfCBudWxsO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUd28tbGV0dGVyIElTTyBjb2RlIHJlcHJlc2VudGluZyB0aGUgY291bnRyeSBvZiB0aGUgY2FyZC4gWW91XG4gICAgICAgKiBjb3VsZCB1c2UgdGhpcyBhdHRyaWJ1dGUgdG8gZ2V0IGEgc2Vuc2Ugb2YgdGhlIGludGVybmF0aW9uYWxcbiAgICAgICAqIGJyZWFrZG93biBvZiBjYXJkcyB5b3XigJl2ZSBjb2xsZWN0ZWQuXG4gICAgICAgKi9cbiAgICAgIGNvdW50cnk6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUd28tZGlnaXQgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgY2FyZOKAmXMgZXhwaXJhdGlvbiBtb250aC5cbiAgICAgICAqL1xuICAgICAgZXhwX21vbnRoOiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogRm91ci1kaWdpdCBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjYXJk4oCZcyBleHBpcmF0aW9uIHllYXIuXG4gICAgICAgKi9cbiAgICAgIGV4cF95ZWFyOiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVW5pcXVlbHkgaWRlbnRpZmllcyB0aGlzIHBhcnRpY3VsYXIgY2FyZCBudW1iZXIuIFlvdSBjYW4gdXNlXG4gICAgICAgKiB0aGlzIGF0dHJpYnV0ZSB0byBjaGVjayB3aGV0aGVyIHR3byBjdXN0b21lcnMgd2hv4oCZdmUgc2lnbmVkXG4gICAgICAgKiB1cCB3aXRoIHlvdSBhcmUgdXNpbmcgdGhlIHNhbWUgY2FyZCBudW1iZXIsIGZvciBleGFtcGxlLlxuICAgICAgICovXG4gICAgICBmaW5nZXJwcmludDogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIENhcmQgZnVuZGluZyB0eXBlXG4gICAgICAgKi9cbiAgICAgIGZ1bmRpbmc6IGZ1bmRpbmdUeXBlO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGFpbHMgb2YgdGhlIG9yaWdpbmFsIFBheW1lbnRNZXRob2QgdGhhdCBjcmVhdGVkIHRoaXMgb2JqZWN0LlxuICAgICAgICovXG4gICAgICBnZW5lcmF0ZWRfZnJvbToge1xuICAgICAgICAgIGNoYXJnZT86IHN0cmluZyB8IG51bGw7XG4gICAgICAgICAgcGF5bWVudF9tZXRob2RfZGV0YWlscz86IFBheW1lbnRNZXRob2REZXRhaWxzIHwgbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGxhc3QgZm91ciBkaWdpdHMgb2YgdGhlIGNhcmQuXG4gICAgICAgKi9cbiAgICAgIGxhc3Q0OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udGFpbnMgZGV0YWlscyBvbiBob3cgdGhpcyBDYXJkIG1heWJlIGJlIHVzZWQgZm9yIDNEIFNlY3VyZSBhdXRoZW50aWNhdGlvbi5cbiAgICAgICAqL1xuICAgICAgdGhyZWVfZF9zZWN1cmVfdXNhZ2U/OiB7XG4gICAgICAgICAgc3VwcG9ydGVkPzogYm9vbGVhbjtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgdGhpcyBDYXJkIGlzIHBhcnQgb2YgYSBjYXJkIHdhbGxldCwgdGhpcyBjb250YWlucyB0aGUgZGV0YWlscyBvZlxuICAgICAgICogdGhlIGNhcmQgd2FsbGV0LlxuICAgICAgICovXG4gICAgICB3YWxsZXQ6IHtcbiAgICAgICAgICB0eXBlOiAnYW1leF9leHByZXNzX2NoZWNrb3V0J1xuICAgICAgICAgIHwgJ2FwcGxlX3BheSdcbiAgICAgICAgICB8ICdnb29nbGVfcGF5J1xuICAgICAgICAgIHwgJ21hc3RlcnBhc3MnXG4gICAgICAgICAgfCAnc2Ftc3VuZ19wYXknXG4gICAgICAgICAgfCAndmlzYV9jaGVja291dCc7XG4gICAgICAgICAgYW1leF9leHByZXNzX2NoZWNrb3V0PzogYW55O1xuICAgICAgICAgIGFwcGxlX3BheT86IGFueTtcbiAgICAgICAgICBkeW5hbWljX2xhc3Q0PzogYW55O1xuICAgICAgICAgIGdvb2dsZV9wYXk/OiBhbnk7XG4gICAgICAgICAgbWFzdGVycGFzcz86IGFueTtcbiAgICAgICAgICBzYW1zdW5nX3BheT86IGFueTtcbiAgICAgICAgICB2aXNhX2NoZWNrb3V0PzogYW55O1xuICAgICAgfSB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRGV0YWlscyBhYm91dCB0aGUgcGF5bWVudCBtZXRob2QgYXQgdGhlIHRpbWUgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICAgKi9cbiAgaW50ZXJmYWNlIFBheW1lbnRNZXRob2REZXRhaWxzIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgdHJhbnNhY3Rpb24tc3BlY2lmaWMgZGV0YWlscyBvZiB0aGUgcGF5bWVudCBtZXRob2QgdXNlZCBpbiB0aGUgcGF5bWVudFxuICAgICAgICovXG4gICAgICB0eXBlOiAnYWNoX2NyZWRpdF90cmFuc2ZlcidcbiAgICAgIHwgJ2FjaF9kZWJpdCdcbiAgICAgIHwgJ2FsaXBheSdcbiAgICAgIHwgJ2JhbmNvbnRhY3QnXG4gICAgICB8ICdjYXJkJ1xuICAgICAgfCAnZXBzJ1xuICAgICAgfCAnZ2lyb3BheSdcbiAgICAgIHwgJ2lkZWFsJ1xuICAgICAgfCAnbXVsdGliYW5jbydcbiAgICAgIHwgJ3AyNCdcbiAgICAgIHwgJ3NlcGFfZGViaXQnXG4gICAgICB8ICdzb2ZvcnQnXG4gICAgICB8ICdzdHJpcGVfYWNjb3VudCdcbiAgICAgIHwgJ3dlY2hhdCc7XG5cbiAgICAgIGFjaF9jcmVkaXRfdHJhbnNmZXI/OiBBY2hDcmVkaXRUcmFuc2ZlckRldGFpbHMgfCBudWxsO1xuICAgICAgYWNoX2RlYml0PzogQWNoRGViaXREZXRhaWxzIHwgbnVsbDtcbiAgICAgIGFsaXBheT86IGFueSB8IG51bGw7XG4gICAgICBiYW5jb250YWN0PzogQmFuQ29udGFjdERldGFpbHMgfCBudWxsO1xuICAgICAgY2FyZD86IFBheW1lbnRNZXRob2RDYXJkIHwgbnVsbDtcbiAgICAgIGVwcz86IEVwc0RldGFpbHMgfCBudWxsO1xuICAgICAgZ2lyb3BheT86IEdpcm9wYXlEZXRhaWxzIHwgbnVsbDtcbiAgICAgIGlkZWFsPzogSWRlYWxEZXRhaWxzIHwgbnVsbDtcbiAgICAgIG11bHRpYmFuY28/OiBNdWx0aWJhbmNvRGV0YWlscyB8IG51bGw7XG4gICAgICBwMjQ/OiBQMjREZXRhaWxzIHwgbnVsbDtcbiAgICAgIHNlcGFfZGViaXQ/OiBTZXBhRGViaXREZXRhaWxzIHwgbnVsbDtcbiAgICAgIHNvZm9ydD86IFNvZm9ydERldGFpbHMgfCBudWxsO1xuICAgICAgc3RyaXBlX2FjY291bnQ/OiBhbnkgfCBudWxsO1xuICAgICAgd2VjaGF0PzogYW55IHwgbnVsbDtcbiAgfVxuXG4gIGludGVyZmFjZSBBY2hDcmVkaXRUcmFuc2ZlckRldGFpbHMge1xuICAgICAgYWNjb3VudF9udW1iZXI6IHN0cmluZztcbiAgICAgIGJhbmtfbmFtZTogc3RyaW5nO1xuICAgICAgcm91dGluZ19udW1iZXI6IHN0cmluZztcbiAgICAgIHN3aWZ0X2Nvb2RlOiBzdHJpbmc7XG4gIH1cblxuICBpbnRlcmZhY2UgQWNoRGViaXREZXRhaWxzIHtcbiAgICAgIGFjY291bnRfaG9sZGVyX3R5cGU6ICdpbmRpdmlkdWFsJyB8ICdjb21wYW55JztcbiAgICAgIGJhbmtfbmFtZTogc3RyaW5nO1xuICAgICAgY291bnRyeTogc3RyaW5nO1xuICAgICAgZmluZ2VycHJpbnQ6IHN0cmluZztcbiAgICAgIGxhc3Q0OiBzdHJpbmc7XG4gICAgICByb3V0aW5nX251bWJlcjogc3RyaW5nO1xuICB9XG5cbiAgaW50ZXJmYWNlIEJhbkNvbnRhY3REZXRhaWxzIHtcbiAgICAgIGJhbmtfY29kZTogc3RyaW5nO1xuICAgICAgYmFua19uYW1lOiBzdHJpbmc7XG4gICAgICBiaWM6IHN0cmluZztcbiAgICAgIGliYW5fbGFzdDQ6IHN0cmluZztcbiAgICAgIHByZWZlcnJlZF9sYW5ndWFnZTogJ2VuJyB8ICdkZScgfCAnZnInIHwgJ25sJztcbiAgICAgIHZlcmlmaWVkX25hbWU6IHN0cmluZztcbiAgfVxuXG4gIGludGVyZmFjZSBFcHNEZXRhaWxzIHtcbiAgICAgIHZlcmlmaWVkX25hbWU6IHN0cmluZztcbiAgfVxuXG4gIGludGVyZmFjZSBHaXJvcGF5RGV0YWlscyB7XG4gICAgICBiYW5rX2NvZGU6IHN0cmluZztcbiAgICAgIGJhbmtfbmFtZTogc3RyaW5nO1xuICAgICAgYmljOiBzdHJpbmc7XG4gICAgICB2ZXJpZmllZF9uYW1lOiBzdHJpbmc7XG4gIH1cblxuICBpbnRlcmZhY2UgSWRlYWxEZXRhaWxzIHtcbiAgICAgIGJhbms6ICdhYm5fYW1ybydcbiAgICAgIHwgJ2Fzbl9iYW5rJ1xuICAgICAgfCAnYnVucSdcbiAgICAgIHwgJ2hhbmRlbHNiYW5rZW4nXG4gICAgICB8ICdpbmcnXG4gICAgICB8ICdrbmFiJ1xuICAgICAgfCAnbW9uZXlvdSdcbiAgICAgIHwgJ3JhYm9iYW5rJ1xuICAgICAgfCAncmVnaW9iYW5rJ1xuICAgICAgfCAnc25zX2JhbmsnXG4gICAgICB8ICd0cmlvZG9zX2JhbmsnXG4gICAgICB8ICd2YW5fbGFuc2Nob3QnO1xuXG4gICAgICBiaWM6IHN0cmluZztcbiAgICAgIGliYW5fbGFzdDQ6IHN0cmluZztcbiAgICAgIHZlcmlmaWVkX25hbWU6IHN0cmluZztcbiAgfVxuXG4gIGludGVyZmFjZSBNdWx0aWJhbmNvRGV0YWlscyB7XG4gICAgICBlbnRpdHk6IHN0cmluZztcbiAgICAgIHJlZmVyZW5jZTogc3RyaW5nO1xuICB9XG5cbiAgaW50ZXJmYWNlIFAyNERldGFpbHMge1xuICAgICAgcmVmZXJlbmNlOiBzdHJpbmc7XG4gICAgICB2ZXJpZmllZF9uYW1lOiBzdHJpbmc7XG4gIH1cblxuICBpbnRlcmZhY2UgU2VwYURlYml0RGV0YWlscyB7XG4gICAgICBiYW5rX2NvZGU6IHN0cmluZztcbiAgICAgIGJyYW5jaF9jb2RlOiBzdHJpbmc7XG4gICAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgICBmaW5nZXJwcmludDogc3RyaW5nO1xuICAgICAgbGFzdDQ6IHN0cmluZztcbiAgfVxuXG4gIGludGVyZmFjZSBTb2ZvcnREZXRhaWxzIHtcbiAgICAgIGJhbmtfY29kZTogc3RyaW5nO1xuICAgICAgYmFua19uYW1lOiBzdHJpbmc7XG4gICAgICBiaWM6IHN0cmluZztcbiAgICAgIGNvdW50cnk6IHN0cmluZztcbiAgICAgIGliYW5fbGFzdDQ6IHN0cmluZztcbiAgICAgIHZlcmlmaWVkX25hbWU6IHN0cmluZztcbiAgfVxufVxuXG5pbnRlcmZhY2UgQmlsbGluZ0RldGFpbHNBZGRyZXNzIHtcbiAgY2l0eT86IHN0cmluZztcbiAgY291bnRyeT86IHN0cmluZztcbiAgbGluZTE/OiBzdHJpbmc7XG4gIGxpbmUyPzogc3RyaW5nO1xuICBwb3N0YWxfY29kZT86IHN0cmluZztcbiAgc3RhdGU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBCaWxsaW5nRGV0YWlscyB7XG4gIGFkZHJlc3M/OiBCaWxsaW5nRGV0YWlsc0FkZHJlc3MgfCBudWxsO1xuICBlbWFpbD86IHN0cmluZyB8IG51bGw7XG4gIG5hbWU/OiBzdHJpbmcgfCBudWxsO1xuICBwaG9uZT86IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogQSBzZXQgb2Yga2V5L3ZhbHVlIHBhaXJzIHRoYXQgeW91IGNhbiBhdHRhY2ggdG8gYW4gb2JqZWN0LiBJdCBjYW4gYmUgdXNlZnVsIGZvciBzdG9yaW5nXG4gKiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YSB7XG4gIFt4OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDcmVhdGVQYXltZW50TWV0aG9kT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBCaWxsaW5nIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgUGF5bWVudE1ldGhvZFxuICAgKiB0aGF0IG1heSBiZSB1c2VkIG9yIHJlcXVpcmVkIGJ5IHBhcnRpY3VsYXIgdHlwZXMgb2ZcbiAgICogcGF5bWVudCBtZXRob2RzLlxuICAgKi9cbiAgYmlsbGluZ19kZXRhaWxzPzogQmlsbGluZ0RldGFpbHM7XG4gIG1ldGFkYXRhPzogTWV0YWRhdGE7XG59XG5cbmludGVyZmFjZSBQYXltZW50TWV0aG9kUmVzcG9uc2Uge1xuICBwYXltZW50TWV0aG9kPzogcGF5bWVudE1ldGhvZC5QYXltZW50TWV0aG9kO1xuICBlcnJvcj86IEVycm9yO1xufVxuIl19