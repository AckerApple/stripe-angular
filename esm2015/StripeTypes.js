import { InjectionToken } from '@angular/core';
export const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
export const STRIPE_OPTIONS = new InjectionToken('Stripe Options');
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"StripeTypes.js","sourceRoot":"../../../src/","sources":["StripeTypes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,MAAM,CAAC,MAAM,sBAAsB,GAAG,IAAI,cAAc,CAAS,wBAAwB,CAAC,CAAA;AAC1F,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,cAAc,CAAwB,gBAAgB,CAAC,CAAA","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>('Stripe Publishable Key')\nexport const STRIPE_OPTIONS = new InjectionToken<StripeInstanceOptions>('Stripe Options')\n\nexport interface Stripe{\n  (string:string,options?:StripeInstanceOptions):StripeInstance\n}\n\nexport interface StripeInstance{\n  elements(options?: elements.ElementsCreateOptions): elements.Elements;\n  createToken(element: elements.Element, options?: TokenOptions | BankAccountTokenOptions): Promise<TokenResponse>;\n  createToken(name: 'bank_account', options: BankAccountTokenOptions): Promise<TokenResponse>;\n  createToken(name: 'pii', options: PiiTokenOptions): Promise<TokenResponse>;\n  createSource(element: elements.Element, options?: { owner?: OwnerInfo, metadata?: Metadata }): Promise<SourceResponse>;\n  createSource(options: SourceOptions): Promise<SourceResponse>;\n  retrieveSource(options: RetrieveSourceOptions): Promise<SourceResponse>;\n  createPaymentMethod(\n    type: paymentMethod.paymentMethodType,\n    element: elements.Element,\n    options?: CreatePaymentMethodOptions,\n  ): Promise<PaymentMethodResponse>;\n  createPaymentMethod(\n      data: PaymentMethodData\n  ): Promise<PaymentMethodResponse>;\n}\n\nexport interface StripeInstanceOptions{\n  stripeAccount ?: string;\n}\n\nexport interface StripeCard {\n  id                  : string\n  object              : \"card\"|string\n  name                : string\n  address_city        : string\n  address_country     : string\n  address_line1       : string\n  address_line1_check : string\n  address_line2       : string\n  address_state       : string\n  address_zip         : string\n  address_zip_check   : string\n  brand               : string\n  country             : string\n  cvc_check           : string\n  dynamic_last4       : string\n  exp_month           : number\n  exp_year            : number\n  funding             : string\n  last4               : string\n  metadata            : Metadata\n  tokenization_method : any\n}\n\nexport interface StripeStyle{\n  color          : string\n  fontFamily     : string\n  fontSize       : string\n  fontSmoothing  : string\n  fontStyle      : string\n  fontVariant    : string\n  iconColor      : string\n  lineHeight     : string\n  letterSpacing  : string\n  textAlign      : string\n  textDecoration : string\n  textShadow     : string\n  textTransform  : string\n}\n\nexport interface StripeStyling{\n  base     : StripeStyle\n  complete : StripeStyle\n  empty    : StripeStyle\n  invalid  : StripeStyle\n}\n\nexport interface StripeClasses{\n  base     : string\n  complete : string\n  empty    : string\n  focus    : string\n  invalid  : string\n  webkitAutofill:string\n}\n\ntype elementsType = 'card' | 'cardNumber' | 'cardExpiry' | 'cardCvc' | 'postalCode' | 'paymentRequestButton' | 'iban' | 'idealBank';\n\ninterface Elements {\n  create(type: elementsType, options?: ElementsOptions): Element;\n  getElement(type: elementsType): Element | null;\n}\n\nexport interface ElementsOptions {\n  classes?: {\n      base?: string;\n      complete?: string;\n      empty?: string;\n      focus?: string;\n      invalid?: string;\n      webkitAutofill?: string;\n  };\n  hidePostalCode?: boolean;\n  hideIcon?: boolean;\n  showIcon?: boolean;\n  iconStyle?: 'solid' | 'default';\n  placeholder?: string;\n  placeholderCountry?: string;\n  style?: {\n      base?: Style;\n      complete?: Style;\n      empty?: Style;\n      invalid?: Style;\n      paymentRequestButton?: PaymentRequestButtonStyleOptions;\n  };\n  value?: string | { [objectKey: string]: string; };\n\n  // TODO: Add this back at later date (avoided due to this package doesn't cover transactions yet)\n  // paymentRequest?: paymentRequest.StripePaymentRequest;\n\n  supportedCountries?: string[];\n  disabled?: boolean;\n}\n\ninterface Style extends StyleOptions {\n  ':hover'?: StyleOptions;\n  ':focus'?: StyleOptions;\n  '::placeholder'?: StyleOptions;\n  '::selection'?: StyleOptions;\n  ':-webkit-autofill'?: StyleOptions;\n  ':disabled'?: StyleOptions;\n  '::-ms-clear'?: StyleOptions;\n}\n\ninterface StyleOptions {\n  color?: string;\n  backgroundColor?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  fontSmoothing?: string;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: string | number;\n  iconColor?: string;\n  lineHeight?: string;\n  letterSpacing?: string;\n  textAlign?: string;\n  textDecoration?: string;\n  textShadow?: string;\n  textTransform?: string;\n}\n\ninterface PaymentRequestButtonStyleOptions {\n  type?: 'default' | 'donate' | 'buy';\n  theme: 'dark' | 'light' | 'light-outline';\n  height: string;\n}\n\nexport interface BankAccountTokenOptions {\n  /**\n   * Two character country code (e.g., US).\n   */\n  country: string;\n  /**\n   * Three character currency code (e.g., usd).\n   */\n  currency: string;\n  /**\n   * The bank routing number (e.g., 111000025). Optional if the currency is eur, as the account number is an IBAN.\n   */\n  routing_number?: string;\n  /**\n   * The bank account number (e.g., 000123456789).\n   */\n  account_number: string;\n  /**\n   * The name of the account holder.\n   */\n  account_holder_name: string;\n  /**\n   * The type of entity that holds the account. Can be either individual or company.\n   */\n  account_holder_type: 'individual' | 'company';\n\n  metadata?: Metadata\n}\n\nexport interface SourceOptions {\n  type: 'ach_credit_transfer' | 'ach_debit' | 'alipay' | 'bancontact' | 'card' | 'card_present' | 'eps' | 'giropay' | 'ideal' | 'multibanco' | 'klarna' | 'p24' | 'sepa_debit' | 'sofort' | 'three_d_secure' | 'wechat' | string;\n\n  flow?: 'redirect' | 'receiver' | 'code_verification' | 'none';\n  sepa_debit?: {\n      iban: string;\n  };\n  currency?: string;\n  amount?: number;\n  owner?: OwnerInfo;\n  mandate?: SourceMandate;\n  metadata?: Metadata;\n  statement_descriptor?: string;\n  redirect?: {\n      return_url: string;\n  };\n  token?: string;\n  usage?: 'reusable' | 'single_use';\n  three_d_secure?: {\n      card: string;\n  };\n  sofort?: {\n      country: string;\n      preferred_language?: 'de' | 'en' | 'es' | 'it' | 'fr' | 'nl' | 'pl';\n  };\n}\nexport interface OwnerInfo {\n  address?: OwnerAddress;\n  name?: string;\n  email?: string;\n  phone?: string;\n}\ninterface OwnerAddress {\n  city?: string;\n  country?: string;\n  line1?: string;\n  line2?: string;\n  postal_code?: string;\n  state?: string;\n}\ninterface PiiTokenOptions {\n  personal_id_number: string;\n}\nexport interface TokenResponse {\n  token?: Token;\n  error?: Error;\n}\n\nexport interface Token {\n  id: string;\n  object: string;\n  bank_account?: BankAccount;\n  card?: Card;\n  client_ip: string;\n  created: number;\n  livemode: boolean;\n  type: string;\n  used: boolean;\n}\n\ntype statusType = 'new' | 'validated' | 'verified' | 'verification_failed' | 'errored';\ninterface BankAccount {\n  id: string;\n  object: string;\n  account_holder_name: string;\n  account_holder_type: string;\n  bank_name: string;\n  country: string;\n  currency: string;\n  fingerprint: string;\n  last4: string;\n  routing_number: string;\n  status: statusType;\n}\n\ntype brandType = 'Visa' | 'American Express' | 'MasterCard' | 'Discover' | 'JCB' | 'Diners Club' | 'Unknown';\ntype checkType = 'pass' | 'fail' | 'unavailable' | 'unchecked';\ntype fundingType = 'credit' | 'debit' | 'prepaid' | 'unknown';\ntype tokenizationType = 'apple_pay' | 'android_pay';\ninterface Card {\n    id: string;\n    object: string;\n    address_city?: string;\n    address_country?: string;\n    address_line1?: string;\n    address_line1_check?: checkType;\n    address_line2?: string;\n    address_state?: string;\n    address_zip?: string;\n    address_zip_check?: checkType;\n    brand: brandType;\n    country: string;\n    currency?: string;\n    cvc_check?: checkType;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    fingerprint: string;\n    funding: fundingType;\n    last4: string;\n    metadata: Metadata;\n    name?: string;\n    tokenization_method?: tokenizationType;\n    three_d_secure?: 'required' | 'recommended' | 'optional' | 'not_supported';\n}\n\ninterface TokenOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\ninterface RetrieveSourceOptions {\n  id: string;\n  client_secret: string;\n}\nexport interface SourceResponse {\n  source?: Source;\n  error?: Error;\n}\nexport interface Source {\n  client_secret: string;\n  created: number;\n  currency: string;\n  id: string;\n  owner: {\n      address: OwnerAddress | null;\n      email: string | null;\n      name: string | null;\n      phone: string | null;\n      verified_address: string | null;\n      verified_email: string | null;\n      verified_name: string | null;\n      verified_phone: string | null;\n  };\n  sepa_debit?: {\n      bank_code: string | null;\n      country: string | null;\n      fingerprint: string;\n      last4: string;\n      mandate_reference: string;\n  };\n  card?: Card;\n  status?: string;\n  redirect?: {\n      status: string;\n      url: string;\n  };\n  three_d_secure?: {\n      authenticated: boolean;\n  };\n}\nnamespace elements {\n  export interface ElementsCreateOptions {\n      fonts?: Font[];\n      locale?: string;\n  }\n\n  type handler = (response?: ElementChangeResponse) => void;\n  type eventTypes = 'blur' | 'change' | 'focus' | 'ready';\n  export interface Element {\n      // HTMLElement keeps giving this error for some reason:\n      // Cannot find name 'HTMLElement'\n      mount(domElement: any): void;\n      on(event: eventTypes, handler: handler): void;\n      on(event: 'click', handler: (response: { preventDefault: () => void }) => void): void;\n      addEventListener(event: eventTypes, handler: handler): void;\n      addEventListener(event: 'click', handler: (response: { preventDefault: () => void }) => void): void;\n      focus(): void;\n      blur(): void;\n      clear(): void;\n      unmount(): void;\n      destroy(): void;\n      update(options: ElementsOptions): void;\n  }\n\n  interface ElementChangeResponse {\n      elementType: string;\n      brand: string;\n      complete: boolean;\n      empty: boolean;\n      value?: { postalCode: string | number } | string;\n      country?: string;\n      bankName?: string;\n      error?: Error;\n  }\n\n  interface ElementOptions {\n      fonts?: Font[];\n      locale?: string;\n  }\n\n  type elementsType = 'card' | 'cardNumber' | 'cardExpiry' | 'cardCvc' | 'postalCode' | 'paymentRequestButton' | 'iban' | 'idealBank';\n  export interface Elements {\n      create(type: elementsType, options?: ElementsOptions): Element;\n      getElement(type: elementsType): Element | null;\n  }\n\n  interface ElementsOptions {\n      classes?: {\n          base?: string;\n          complete?: string;\n          empty?: string;\n          focus?: string;\n          invalid?: string;\n          webkitAutofill?: string;\n      };\n      hidePostalCode?: boolean;\n      hideIcon?: boolean;\n      showIcon?: boolean;\n      iconStyle?: 'solid' | 'default';\n      placeholder?: string;\n      placeholderCountry?: string;\n      style?: {\n          base?: Style;\n          complete?: Style;\n          empty?: Style;\n          invalid?: Style;\n          paymentRequestButton?: PaymentRequestButtonStyleOptions;\n      };\n      value?: string | { [objectKey: string]: string; };\n\n      // TODO: Holding off on this\n      // paymentRequest?: paymentRequest.StripePaymentRequest;\n\n      supportedCountries?: string[];\n      disabled?: boolean;\n  }\n\n  interface Style extends StyleOptions {\n      ':hover'?: StyleOptions;\n      ':focus'?: StyleOptions;\n      '::placeholder'?: StyleOptions;\n      '::selection'?: StyleOptions;\n      ':-webkit-autofill'?: StyleOptions;\n      ':disabled'?: StyleOptions;\n      '::-ms-clear'?: StyleOptions;\n  }\n\n  interface Font {\n      family?: string;\n      src?: string;\n      display?: string;\n      style?: string;\n      unicodeRange?: string;\n      weight?: string;\n      cssSrc?: string;\n  }\n\n  interface StyleOptions {\n      color?: string;\n      backgroundColor?: string;\n      fontFamily?: string;\n      fontSize?: string;\n      fontSmoothing?: string;\n      fontStyle?: string;\n      fontVariant?: string;\n      fontWeight?: string | number;\n      iconColor?: string;\n      lineHeight?: string;\n      letterSpacing?: string;\n      textAlign?: string;\n      textDecoration?: string;\n      textShadow?: string;\n      textTransform?: string;\n  }\n\n  interface PaymentRequestButtonStyleOptions {\n      type?: 'default' | 'donate' | 'buy';\n      theme: 'dark' | 'light' | 'light-outline';\n      height: string;\n  }\n}\n\ninterface OfflineAcceptanceMandate {\n  contact_email: string;\n}\n\ninterface OnlineAcceptanceMandate {\n  date: number;\n  ip: string;\n  user_agent: string;\n}\n\ninterface SourceMandateAcceptance {\n  date: number;\n  status: 'accepted' | 'refused';\n  ip?: string;\n  offline?: OfflineAcceptanceMandate;\n  online?: OnlineAcceptanceMandate;\n  type?: 'online'| 'offline';\n  user_agent?: string;\n}\n\ninterface SourceMandate {\n  acceptance?: SourceMandateAcceptance;\n  amount?: number;\n  currency?: string;\n  interval?: 'one_time' | 'scheduled' | 'variable';\n  notification_method?: 'email' | 'manual' | 'none';\n}\n\nnamespace paymentMethod {\n  export type paymentMethodType = 'card' | 'card_present';\n\n  export interface PaymentMethod {\n      /**\n       * The unique identifier for the object\n       */\n      id: string;\n\n      /**\n       * Value is \"payment_method\"\n       */\n      object: 'payment_method';\n\n      /**\n       * Billing information associated with the PaymentMethod that may be\n       * used or required by particular types of payment methods.\n       */\n      billing_details: BillingDetails;\n\n      /**\n       * If this is a card PaymentMethod, this hash contains details about the card.\n       */\n      card?: PaymentMethodCard;\n\n      /**\n       * If this is an card_present PaymentMethod, this hash contains details\n       * about the Card Present payment method.\n       */\n      card_present?: any;\n\n      /**\n       * Time at which the object was created. Measured in seconds since the\n       * Unix epoch.\n       */\n      created: number;\n\n      /**\n       * The ID of the Customer to which this PaymentMethod is saved.\n       * This will not be set when the PaymentMethod has not been saved to a Customer.\n       */\n      customer: string | null;\n\n      /**\n       * Has the value true if the object exists in live mode or the value\n       * false if the object exists in test mode.\n       */\n      livemode: boolean;\n\n      metadata: Metadata;\n\n      /**\n       * The type of the PaymentMethod. An additional hash is included on the\n       * PaymentMethod with a name matching this value. It contains additional\n       * information specific to the PaymentMethod type.\n       */\n      type: string;\n  }\n\n  type paymentMethodCardBrand = 'amex'\n      | 'diners'\n      | 'discover'\n      | 'jcb'\n      | 'mastercard'\n      | 'unionpay'\n      | 'visa'\n      | 'unknown';\n\n  interface PaymentMethodCard {\n      /**\n       * Card brand\n       */\n      brand: paymentMethodCardBrand;\n\n      /**\n       * Checks on Card address and CVC if provided.\n       */\n      checks: {\n          address_line1_check: boolean | null;\n          address_postal_code_check: boolean | null;\n          cvc_check: boolean | null;\n      };\n\n      /**\n       * Two-letter ISO code representing the country of the card. You\n       * could use this attribute to get a sense of the international\n       * breakdown of cards you’ve collected.\n       */\n      country: string;\n\n      /**\n       * Two-digit number representing the card’s expiration month.\n       */\n      exp_month: number;\n\n      /**\n       * Four-digit number representing the card’s expiration year.\n       */\n      exp_year: number;\n\n      /**\n       * Uniquely identifies this particular card number. You can use\n       * this attribute to check whether two customers who’ve signed\n       * up with you are using the same card number, for example.\n       */\n      fingerprint: string;\n\n      /**\n       * Card funding type\n       */\n      funding: fundingType;\n\n      /**\n       * Details of the original PaymentMethod that created this object.\n       */\n      generated_from: {\n          charge?: string | null;\n          payment_method_details?: PaymentMethodDetails | null;\n      };\n\n      /**\n       * The last four digits of the card.\n       */\n      last4: string;\n\n      /**\n       * Contains details on how this Card maybe be used for 3D Secure authentication.\n       */\n      three_d_secure_usage?: {\n          supported?: boolean;\n      };\n\n      /**\n       * If this Card is part of a card wallet, this contains the details of\n       * the card wallet.\n       */\n      wallet: {\n          type: 'amex_express_checkout'\n          | 'apple_pay'\n          | 'google_pay'\n          | 'masterpass'\n          | 'samsung_pay'\n          | 'visa_checkout';\n          amex_express_checkout?: any;\n          apple_pay?: any;\n          dynamic_last4?: any;\n          google_pay?: any;\n          masterpass?: any;\n          samsung_pay?: any;\n          visa_checkout?: any;\n      } | null;\n  }\n\n  /**\n   * Details about the payment method at the time of the transaction.\n   */\n  interface PaymentMethodDetails {\n      /**\n       * The type of transaction-specific details of the payment method used in the payment\n       */\n      type: 'ach_credit_transfer'\n      | 'ach_debit'\n      | 'alipay'\n      | 'bancontact'\n      | 'card'\n      | 'eps'\n      | 'giropay'\n      | 'ideal'\n      | 'multibanco'\n      | 'p24'\n      | 'sepa_debit'\n      | 'sofort'\n      | 'stripe_account'\n      | 'wechat';\n\n      ach_credit_transfer?: AchCreditTransferDetails | null;\n      ach_debit?: AchDebitDetails | null;\n      alipay?: any | null;\n      bancontact?: BanContactDetails | null;\n      card?: PaymentMethodCard | null;\n      eps?: EpsDetails | null;\n      giropay?: GiropayDetails | null;\n      ideal?: IdealDetails | null;\n      multibanco?: MultibancoDetails | null;\n      p24?: P24Details | null;\n      sepa_debit?: SepaDebitDetails | null;\n      sofort?: SofortDetails | null;\n      stripe_account?: any | null;\n      wechat?: any | null;\n  }\n\n  interface AchCreditTransferDetails {\n      account_number: string;\n      bank_name: string;\n      routing_number: string;\n      swift_coode: string;\n  }\n\n  interface AchDebitDetails {\n      account_holder_type: 'individual' | 'company';\n      bank_name: string;\n      country: string;\n      fingerprint: string;\n      last4: string;\n      routing_number: string;\n  }\n\n  interface BanContactDetails {\n      bank_code: string;\n      bank_name: string;\n      bic: string;\n      iban_last4: string;\n      preferred_language: 'en' | 'de' | 'fr' | 'nl';\n      verified_name: string;\n  }\n\n  interface EpsDetails {\n      verified_name: string;\n  }\n\n  interface GiropayDetails {\n      bank_code: string;\n      bank_name: string;\n      bic: string;\n      verified_name: string;\n  }\n\n  interface IdealDetails {\n      bank: 'abn_amro'\n      | 'asn_bank'\n      | 'bunq'\n      | 'handelsbanken'\n      | 'ing'\n      | 'knab'\n      | 'moneyou'\n      | 'rabobank'\n      | 'regiobank'\n      | 'sns_bank'\n      | 'triodos_bank'\n      | 'van_lanschot';\n\n      bic: string;\n      iban_last4: string;\n      verified_name: string;\n  }\n\n  interface MultibancoDetails {\n      entity: string;\n      reference: string;\n  }\n\n  interface P24Details {\n      reference: string;\n      verified_name: string;\n  }\n\n  interface SepaDebitDetails {\n      bank_code: string;\n      branch_code: string;\n      country: string;\n      fingerprint: string;\n      last4: string;\n  }\n\n  interface SofortDetails {\n      bank_code: string;\n      bank_name: string;\n      bic: string;\n      country: string;\n      iban_last4: string;\n      verified_name: string;\n  }\n}\n\ninterface BillingDetailsAddress {\n  city?: string;\n  country?: string;\n  line1?: string;\n  line2?: string;\n  postal_code?: string;\n  state?: string;\n}\n\ninterface BillingDetails {\n  address?: BillingDetailsAddress | null;\n  email?: string | null;\n  name?: string | null;\n  phone?: string | null;\n}\n\n/**\n * A set of key/value pairs that you can attach to an object. It can be useful for storing\n * additional information about the object in a structured format.\n */\nexport interface Metadata {\n  [x: string]: string;\n}\n\ninterface CreatePaymentMethodOptions {\n  /**\n   * Billing information associated with the PaymentMethod\n   * that may be used or required by particular types of\n   * payment methods.\n   */\n  billing_details?: BillingDetails;\n  metadata?: Metadata;\n}\n\ninterface PaymentMethodResponse {\n  paymentMethod?: paymentMethod.PaymentMethod;\n  error?: Error;\n}\n"]}